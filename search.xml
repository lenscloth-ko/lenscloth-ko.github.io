<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ActionResult&lt;T&gt;</title>
      <link href="/2019/02/01/ActionResult/"/>
      <url>/2019/02/01/ActionResult/</url>
      
        <content type="html"><![CDATA[<p>Core 2.1부터 생긴 ActionResult<t> 관련 내용입니다.</t></p><p>일단 서로 다른 형식의 return 형과 object를 ActionResult를 통해 전달받을 수 있다!! 는 편리함이 있습니다.</p><figure class="highlight csharp"><figcaption><span>ex01</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ActionResult&lt;모델&gt;</span><br><span class="line">&#123;</span><br><span class="line">    ...진입 예외처리...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> 모델 = Get모델(키);</span><br><span class="line"></span><br><span class="line">    ...처리처리....</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> 모델</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a href="https://docs.microsoft.com/ko-kr/aspnet/core/web-api/action-return-types?view=aspnetcore-2.2#actionresultt-type" title="target=_blank" target="_blank" rel="noopener">MicrosoftDOC 링크</a><p>위의 링크에 나온데로 ActionResult에서 파생된 형식을 반환하거나 특정형식(Json, XML, etc)을 반환할 수 있습니다.!!!!!</p><figure class="highlight csharp"><figcaption><span>ex01</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// GET: api/Todo/5</span></span><br><span class="line">[<span class="meta">HttpGet(<span class="meta-string">"&#123;id&#125;"</span>)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;ActionResult&lt;TodoItem&gt;&gt; GetTodoItem(<span class="keyword">long</span> id)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> todoItem = <span class="keyword">await</span> _context.TodoItems.FindAsync(id);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (todoItem == <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> NotFound();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> todoItem;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이런식의 사용이 가능합니다, IActionResult(IActionResult Interface) 를 사용했을때 라면 CAST과정이 필요했었다고 저는 기억하고 있습니다, 그런데 ActionResult<t>는 T 의 ObjectResult로 변환합니다(암시적 캐스트 연산자 T) </t></p><p>쓸때없는 말들로 앞을 채웠지만…편하다!!! 써보니 편리하고 선언시점에서 어노테이션을 주어서 명시적으로 캐스트해서 ActionResult를 받던 방법에서는 Swagger같은데서 잘 못읽는 경우…뭐…..대부분 잘 읽었어요 사실…다들 아시잖아요…그런데 엄청 길게 갔을때의 좀더 명확한 코딩이 가능하다 맘에든다 는 의미의 포스팅이었습니다..</p><p>ㅋㅋ 감사합니다.</p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> ASP.Net Core </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Core 2.1 </tag>
            
            <tag> 반환형 </tag>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OPC Server</title>
      <link href="/2018/12/21/OPC-Server/"/>
      <url>/2018/12/21/OPC-Server/</url>
      
        <content type="html"><![CDATA[<blockquote><p></p><p>OPC 서버는 산업용 자동화 및 loT를 위한 연결 플랫폼으로 제조업에서 일반적 널리 사용되는 약150개 이상의 드라이버를 제공하는 소프트<br>웨어이다.<br>1) 산업제어시스템 고유의 통신 요구사항에 맞추었으며<br>2) 장비를 자동으로 연결하고,<br>3) 장비의 데이타를 읽고 쓸 수 있으며,<br>4) 해당 데이터를 HMI, SCADA, MES, Historion 또는 ERP 시스템에 완벽하게 통합할 수 있고,<br>5) 높은 신뢰성과 사용자 편의성으로 신속하게<br>설치하여 완벽하게 작동할 수 있도록 한다.<br></p><footer><strong>SAMBOO</strong><cite><a href="http://www.samboo.co.kr/data/OPCserver.pdf" target="_blank" rel="noopener">l OPCls</a></cite></footer></blockquote><p></p><img src="/images/2018/opc.png" class="center" title="OPC">]]></content>
      
      
      <categories>
          
          <category> MES </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OPC </tag>
            
            <tag> OPC Server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EPS (Expanded Polystyrene)</title>
      <link href="/2018/11/03/EPS-Expanded-Polystyrene/"/>
      <url>/2018/11/03/EPS-Expanded-Polystyrene/</url>
      
        <content type="html"><![CDATA[<blockquote><p>스티로폼으로 알려진 PS 발포 제품<br>열가소성 수지인 폴리스타이렌(PS)를 발포해 만든 소재로, 스티로폼란 이름으로<br>더 잘 알려져 있습니다. 발포폴리스타이렌 이라는 특성상 다량의 공기층으로 구성되어 있으며,<br>이 때문에 단열성, 완충성, 방수성, 방음성이 우수합니다. 그래서 가전의 완충포장재, 건축 단열재,<br>식품 포장용기 등의 분야에서 다양하게 사용됩니다.</p><footer><strong>LG화학</strong><cite><a href="http://www.lgchem.com/kr/abs/expendable-polystyrene-eps/product-detail-PDBDD000" target="_blank" rel="noopener">EPS</a></cite></footer></blockquote>]]></content>
      
      
      <categories>
          
          <category> MES </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 화학 </tag>
            
            <tag> 기초소재 </tag>
            
            <tag> EPS </tag>
            
            <tag> 스티로폼 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Barcode 128 Codeset</title>
      <link href="/2018/11/02/Barcode-128-Codeset/"/>
      <url>/2018/11/02/Barcode-128-Codeset/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th>Value</th><th>128A</th><th>128B</th><th>128C</th><th>Code</th><th>Latin-1</th><th>Pattern</th><th>Widths</th></tr></thead><tbody><tr><td>0</td><td>space</td><td>space</td><td>00</td><td>32 or 212 / 252</td><td>␣ or Ô / ü</td><td>11011001100</td><td>212222</td></tr><tr><td>1</td><td>!</td><td>!</td><td>01</td><td>33</td><td>!</td><td>11001101100</td><td>222122</td></tr><tr><td>2</td><td>“</td><td>“</td><td>02</td><td>34</td><td>“</td><td>11001100110</td><td>222221</td></tr><tr><td>3</td><td>#</td><td>#</td><td>03</td><td>35</td><td>#</td><td>10010011000</td><td>121223</td></tr><tr><td>4</td><td>$</td><td>$</td><td>04</td><td>36</td><td>$</td><td>10010001100</td><td>121322</td></tr><tr><td>5</td><td>%</td><td>%</td><td>05</td><td>37</td><td>%</td><td>10001001100</td><td>131222</td></tr><tr><td>6</td><td>&amp;</td><td>&amp;</td><td>06</td><td>38</td><td>&amp;</td><td>10011001000</td><td>122213</td></tr><tr><td>7</td><td>‘</td><td>‘</td><td>07</td><td>39</td><td>‘</td><td>10011000100</td><td>122312</td></tr><tr><td>8</td><td>(</td><td>(</td><td>08</td><td>40</td><td>(</td><td>10001100100</td><td>132212</td></tr><tr><td>9</td><td>)</td><td>)</td><td>09</td><td>41</td><td>)</td><td>11001001000</td><td>221213</td></tr><tr><td>10</td><td>*</td><td>*</td><td>10</td><td>42</td><td>*</td><td>11001000100</td><td>221312</td></tr><tr><td>11</td><td>+</td><td>+</td><td>11</td><td>43</td><td>+</td><td>11000100100</td><td>231212</td></tr><tr><td>12</td><td>,</td><td>,</td><td>12</td><td>44</td><td>,</td><td>10110011100</td><td>112232</td></tr><tr><td>13</td><td>-</td><td>-</td><td>13</td><td>45</td><td>-</td><td>10011011100</td><td>122132</td></tr><tr><td>14</td><td>.</td><td>.</td><td>14</td><td>46</td><td>.</td><td>10011001110</td><td>122231</td></tr><tr><td>15</td><td>/</td><td>/</td><td>15</td><td>47</td><td>/</td><td>10111001100</td><td>113222</td></tr><tr><td>16</td><td>0</td><td>0</td><td>16</td><td>48</td><td>0</td><td>10011101100</td><td>123122</td></tr><tr><td>17</td><td>1</td><td>1</td><td>17</td><td>49</td><td>1</td><td>10011100110</td><td>123221</td></tr><tr><td>18</td><td>2</td><td>2</td><td>18</td><td>50</td><td>2</td><td>11001110010</td><td>223211</td></tr><tr><td>19</td><td>3</td><td>3</td><td>19</td><td>51</td><td>3</td><td>11001011100</td><td>221132</td></tr><tr><td>20</td><td>4</td><td>4</td><td>20</td><td>52</td><td>4</td><td>11001001110</td><td>221231</td></tr><tr><td>21</td><td>5</td><td>5</td><td>21</td><td>53</td><td>5</td><td>11011100100</td><td>213212</td></tr><tr><td>22</td><td>6</td><td>6</td><td>22</td><td>54</td><td>6</td><td>11001110100</td><td>223112</td></tr><tr><td>23</td><td>7</td><td>7</td><td>23</td><td>55</td><td>7</td><td>11101101110</td><td>312131</td></tr><tr><td>24</td><td>8</td><td>8</td><td>24</td><td>56</td><td>8</td><td>11101001100</td><td>311222</td></tr><tr><td>25</td><td>9</td><td>9</td><td>25</td><td>57</td><td>9</td><td>11100101100</td><td>321122</td></tr><tr><td>26</td><td>:</td><td>:</td><td>26</td><td>58</td><td>:</td><td>11100100110</td><td>321221</td></tr><tr><td>27</td><td>;</td><td>;</td><td>27</td><td>59</td><td>;</td><td>11101100100</td><td>312212</td></tr><tr><td>28</td><td>&lt;</td><td>&lt;</td><td>28</td><td>60</td><td>&lt;</td><td>11100110100</td><td>322112</td></tr><tr><td>29</td><td>=</td><td>=</td><td>29</td><td>61</td><td>=</td><td>11100110010</td><td>322211</td></tr><tr><td>30</td><td>&gt;</td><td>&gt;</td><td>30</td><td>62</td><td>&gt;</td><td>11011011000</td><td>212123</td></tr><tr><td>31</td><td>?</td><td>?</td><td>31</td><td>63</td><td>?</td><td>11011000110</td><td>212321</td></tr><tr><td>32</td><td>@</td><td>@</td><td>32</td><td>64</td><td>@</td><td>11000110110</td><td>232121</td></tr><tr><td>33</td><td>A</td><td>A</td><td>33</td><td>65</td><td>A</td><td>10100011000</td><td>111323</td></tr><tr><td>34</td><td>B</td><td>B</td><td>34</td><td>66</td><td>B</td><td>10001011000</td><td>131123</td></tr><tr><td>35</td><td>C</td><td>C</td><td>35</td><td>67</td><td>C</td><td>10001000110</td><td>131321</td></tr><tr><td>36</td><td>D</td><td>D</td><td>36</td><td>68</td><td>D</td><td>10110001000</td><td>112313</td></tr><tr><td>37</td><td>E</td><td>E</td><td>37</td><td>69</td><td>E</td><td>10001101000</td><td>132113</td></tr><tr><td>38</td><td>F</td><td>F</td><td>38</td><td>70</td><td>F</td><td>10001100010</td><td>132311</td></tr><tr><td>39</td><td>G</td><td>G</td><td>39</td><td>71</td><td>G</td><td>11010001000</td><td>211313</td></tr><tr><td>40</td><td>H</td><td>H</td><td>40</td><td>72</td><td>H</td><td>11000101000</td><td>231113</td></tr><tr><td>41</td><td>I</td><td>I</td><td>41</td><td>73</td><td>I</td><td>11000100010</td><td>231311</td></tr><tr><td>42</td><td>J</td><td>J</td><td>42</td><td>74</td><td>J</td><td>10110111000</td><td>112133</td></tr><tr><td>43</td><td>K</td><td>K</td><td>43</td><td>75</td><td>K</td><td>10110001110</td><td>112331</td></tr><tr><td>44</td><td>L</td><td>L</td><td>44</td><td>76</td><td>L</td><td>10001101110</td><td>132131</td></tr><tr><td>45</td><td>M</td><td>M</td><td>45</td><td>77</td><td>M</td><td>10111011000</td><td>113123</td></tr><tr><td>46</td><td>N</td><td>N</td><td>46</td><td>78</td><td>N</td><td>10111000110</td><td>113321</td></tr><tr><td>47</td><td>O</td><td>O</td><td>47</td><td>79</td><td>O</td><td>10001110110</td><td>133121</td></tr><tr><td>48</td><td>P</td><td>P</td><td>48</td><td>80</td><td>P</td><td>11101110110</td><td>313121</td></tr><tr><td>49</td><td>Q</td><td>Q</td><td>49</td><td>81</td><td>Q</td><td>11010001110</td><td>211331</td></tr><tr><td>50</td><td>R</td><td>R</td><td>50</td><td>82</td><td>R</td><td>11000101110</td><td>231131</td></tr><tr><td>51</td><td>S</td><td>S</td><td>51</td><td>83</td><td>S</td><td>11011101000</td><td>213113</td></tr><tr><td>52</td><td>T</td><td>T</td><td>52</td><td>84</td><td>T</td><td>11011100010</td><td>213311</td></tr><tr><td>53</td><td>U</td><td>U</td><td>53</td><td>85</td><td>U</td><td>11011101110</td><td>213131</td></tr><tr><td>54</td><td>V</td><td>V</td><td>54</td><td>86</td><td>V</td><td>11101011000</td><td>311123</td></tr><tr><td>55</td><td>W</td><td>W</td><td>55</td><td>87</td><td>W</td><td>11101000110</td><td>311321</td></tr><tr><td>56</td><td>X</td><td>X</td><td>56</td><td>88</td><td>X</td><td>11100010110</td><td>331121</td></tr><tr><td>57</td><td>Y</td><td>Y</td><td>57</td><td>89</td><td>Y</td><td>11101101000</td><td>312113</td></tr><tr><td>58</td><td>Z</td><td>Z</td><td>58</td><td>90</td><td>Z</td><td>11101100010</td><td>312311</td></tr><tr><td>59</td><td>[</td><td>[</td><td>59</td><td>91</td><td>[</td><td>11100011010</td><td>332111</td></tr><tr><td>60</td><td>\</td><td>\</td><td>60</td><td>92</td><td>\</td><td>11101111010</td><td>314111</td></tr><tr><td>61</td><td>]</td><td>]</td><td>61</td><td>93</td><td>]</td><td>11001000010</td><td>221411</td></tr><tr><td>62</td><td>^</td><td>^</td><td>62</td><td>94</td><td>^</td><td>11110001010</td><td>431111</td></tr><tr><td>63</td><td>_</td><td>_</td><td>63</td><td>95</td><td>_</td><td>10100110000</td><td>111224</td></tr><tr><td>64</td><td>NUL</td><td>`</td><td>64</td><td>96</td><td>`</td><td>10100001100</td><td>111422</td></tr><tr><td>65</td><td>SOH</td><td>a</td><td>65</td><td>97</td><td>a</td><td>10010110000</td><td>121124</td></tr><tr><td>66</td><td>STX</td><td>b</td><td>66</td><td>98</td><td>b</td><td>10010000110</td><td>121421</td></tr><tr><td>67</td><td>ETX</td><td>c</td><td>67</td><td>99</td><td>c</td><td>10000101100</td><td>141122</td></tr><tr><td>68</td><td>EOT</td><td>d</td><td>68</td><td>100</td><td>d</td><td>10000100110</td><td>141221</td></tr><tr><td>69</td><td>ENQ</td><td>e</td><td>69</td><td>101</td><td>e</td><td>10110010000</td><td>112214</td></tr><tr><td>70</td><td>ACK</td><td>f</td><td>70</td><td>102</td><td>f</td><td>10110000100</td><td>112412</td></tr><tr><td>71</td><td>BEL</td><td>g</td><td>71</td><td>103</td><td>g</td><td>10011010000</td><td>122114</td></tr><tr><td>72</td><td>BS</td><td>h</td><td>72</td><td>104</td><td>h</td><td>10011000010</td><td>122411</td></tr><tr><td>73</td><td>HT</td><td>i</td><td>73</td><td>105</td><td>i</td><td>10000110100</td><td>142112</td></tr><tr><td>74</td><td>LF</td><td>j</td><td>74</td><td>106</td><td>j</td><td>10000110010</td><td>142211</td></tr><tr><td>75</td><td>VT</td><td>k</td><td>75</td><td>107</td><td>k</td><td>11000010010</td><td>241211</td></tr><tr><td>76</td><td>FF</td><td>l</td><td>76</td><td>108</td><td>l</td><td>11001010000</td><td>221114</td></tr><tr><td>77</td><td>CR</td><td>m</td><td>77</td><td>109</td><td>m</td><td>11110111010</td><td>413111</td></tr><tr><td>78</td><td>SO</td><td>n</td><td>78</td><td>110</td><td>n</td><td>11000010100</td><td>241112</td></tr><tr><td>79</td><td>SI</td><td>o</td><td>79</td><td>111</td><td>o</td><td>10001111010</td><td>134111</td></tr><tr><td>80</td><td>DLE</td><td>p</td><td>80</td><td>112</td><td>p</td><td>10100111100</td><td>111242</td></tr><tr><td>81</td><td>DC1</td><td>q</td><td>81</td><td>113</td><td>q</td><td>10010111100</td><td>121142</td></tr><tr><td>82</td><td>DC2</td><td>r</td><td>82</td><td>114</td><td>r</td><td>10010011110</td><td>121241</td></tr><tr><td>83</td><td>DC3</td><td>s</td><td>83</td><td>115</td><td>s</td><td>10111100100</td><td>114212</td></tr><tr><td>84</td><td>DC4</td><td>t</td><td>84</td><td>116</td><td>t</td><td>10011110100</td><td>124112</td></tr><tr><td>85</td><td>NAK</td><td>u</td><td>85</td><td>117</td><td>u</td><td>10011110010</td><td>124211</td></tr><tr><td>86</td><td>SYN</td><td>v</td><td>86</td><td>118</td><td>v</td><td>11110100100</td><td>411212</td></tr><tr><td>87</td><td>ETB</td><td>w</td><td>87</td><td>119</td><td>w</td><td>11110010100</td><td>421112</td></tr><tr><td>88</td><td>CAN</td><td>x</td><td>88</td><td>120</td><td>x</td><td>11110010010</td><td>421211</td></tr><tr><td>89</td><td>EM</td><td>y</td><td>89</td><td>121</td><td>y</td><td>11011011110</td><td>212141</td></tr><tr><td>90</td><td>SUB</td><td>z</td><td>90</td><td>122</td><td>z</td><td>11011110110</td><td>214121</td></tr><tr><td>91</td><td>ESC</td><td>{</td><td>91</td><td>123</td><td>{</td><td>11110110110</td><td>412121</td></tr><tr><td>92</td><td>FS</td><td></td><td>92</td><td>124</td><td></td><td>10101111000</td><td>111143</td></tr><tr><td>93</td><td>GS</td><td>}</td><td>93</td><td>125</td><td>}</td><td>10100011110</td><td>111341</td></tr><tr><td>94</td><td>RS</td><td>~</td><td>94</td><td>126</td><td>~</td><td>10001011110</td><td>131141</td></tr><tr><td>95</td><td>US</td><td>DEL</td><td>95</td><td>200 / 240</td><td>È / ð</td><td>10111101000</td><td>114113</td></tr><tr><td>96</td><td>FNC 3</td><td>FNC 3</td><td>96</td><td>201 / 241</td><td>É / ñ</td><td>10111100010</td><td>114311</td></tr><tr><td>97</td><td>FNC 2</td><td>FNC 2</td><td>97</td><td>202 / 242</td><td>Ê / ò</td><td>11110101000</td><td>411113</td></tr><tr><td>98</td><td>Shift B</td><td>Shift A</td><td>98</td><td>203 / 243</td><td>Ë / ó</td><td>11110100010</td><td>411311</td></tr><tr><td>99</td><td>Code C</td><td>Code C</td><td>99</td><td>204 / 244</td><td>Ì / ô</td><td>10111011110</td><td>113141</td></tr><tr><td>100</td><td>Code B</td><td>FNC 4</td><td>Code B</td><td>205 / 245</td><td>Í / õ</td><td>10111101110</td><td>114131</td></tr><tr><td>101</td><td>FNC 4</td><td>Code A</td><td>Code A</td><td>206 / 246</td><td>Î / ö</td><td>11101011110</td><td>311141</td></tr><tr><td>102</td><td>FNC 1</td><td>FNC 1</td><td>FNC 1</td><td>207 / 247</td><td>Ï / ÷</td><td>11110101110</td><td>411131</td></tr><tr><td>103</td><td>Start Code A</td><td>208 / 248</td><td>Ð / ø</td><td>11010000100</td><td>211412</td></tr><tr><td>104</td><td>Start Code B</td><td>209 / 249</td><td>Ñ / ù</td><td>11010010000</td><td>211214</td></tr><tr><td>105</td><td>Start Code C</td><td>210 / 250</td><td>Ò / ú</td><td>11010011100</td><td>211232</td></tr><tr><td>106</td><td>Stop</td><td>—</td><td>—</td><td>11000111010</td><td>233111</td></tr><tr><td>—</td><td>Reverse Stop</td><td>—</td><td>—</td><td>11010111000</td><td>211133</td></tr><tr><td>—</td><td>Stop pattern (7 bars/spaces)</td><td>211 / 251</td><td>Ó / û</td><td>1100011101011</td><td>2331112</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> MES </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Code125 </tag>
            
            <tag> Codeset </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HMI(Human Machine Interface, 사람과 기계간 인터페이스)</title>
      <link href="/2018/11/01/HMI-Human-Machine-Interface-%EC%82%AC%EB%9E%8C%EA%B3%BC-%EA%B8%B0%EA%B3%84%EA%B0%84-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4/"/>
      <url>/2018/11/01/HMI-Human-Machine-Interface-%EC%82%AC%EB%9E%8C%EA%B3%BC-%EA%B8%B0%EA%B3%84%EA%B0%84-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4/</url>
      
        <content type="html"><![CDATA[<blockquote><p>자동화 현장에서 기계를 조작하기 위한 터치스크린을 HMI 라고 부릅니다. Human Machine Interface 라는 뜻으로, 사람과 기계 사이의 인터페이스 역할을 담당합니다.</p><footer><strong>COMFILE</strong><cite><a href="http://comfilewiki.co.kr/ko/doku.php?id=comfilehmi:abouthmi:index" target="_blank" rel="noopener">HMI란 무엇인가?</a></cite></footer></blockquote><img src="/images/2018/p_factory_automation.jpg" title="HMI">]]></content>
      
      
      <categories>
          
          <category> MES </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HMI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1차원 바코드 Code 128</title>
      <link href="/2018/10/31/1%EC%B0%A8%EC%9B%90-%EB%B0%94%EC%BD%94%EB%93%9C-Code-128/"/>
      <url>/2018/10/31/1%EC%B0%A8%EC%9B%90-%EB%B0%94%EC%BD%94%EB%93%9C-Code-128/</url>
      
        <content type="html"><![CDATA[<p>총 108개의 문자를 표현할 수 있으며 시작(3) 종료(2)는 문자수에서 제외됩니다.<br>BARCODE의 구성원리는 알아보았으니 실직적으로 code128의 원리를 파보도록 하겠습니다.<br>code128의 사양(Specification)</p><img src="/images/2018/400px-Barcode_diagram.svg.png" class="center" title="barcode"><p>그림처럼 총 6개의 구역으로 이루어져 있습니다.</p><p>1.Quiet zone<br>2.Start symbol<br>3.Encoded data<br>4.Check symbol<br>5.Stop symbol<br>6.Final bar (often considered part of the stop symbol)<br>7.Quiet zone</p><h2 id="Quiet-zone"><a href="#Quiet-zone" class="headerlink" title="Quiet zone"></a>Quiet zone</h2><p>Quiet zone은 바코드의 앞/뒤에 존재하게 되며 특별히 code128이 아니더라도 모든 바코드에서는 앞/뒤 여백이 있어야 합니다…사실 표준기관에 quiet zone spec을 보면 반드시 아무것도 인쇄해서는 안되는 영역이며 반드시 보장되어야 하는 영역이라고 명시되어 있습니다.<br>(약식 바코드 까지 EAN-8? 같은 것도 포함되는지는 모르겠네요)</p><p>보통 내용문자 *10의 크기를 가져야 합니다.</p><p>이 영역이 사실 디코딩 수준을 결정하기에 딱1개의 양쪽에 *10크기로 비워 라는 아니긴 합니다만, Normal, More Aggressive, One Side EB, Anything 등의 디코딩을 위한 방식이 있으나..넘어가도록 하겠습니다 일단은 양쪽에 *10 크기로 비우는 걸로 ㅎ</p><h2 id="Start-symbol"><a href="#Start-symbol" class="headerlink" title="Start symbol"></a>Start symbol</h2><p>존재목적이라 함은…이제 바코드가 시작된다를 알립니다…허무한가요..;;</p><p>code 128에는 3종류의 codeset이 존재합니다, 128a, 128b, 128c라고 한다고 저는 알고있는데 이게 정말 공식적인 명칭인지는 확실하지 않으니 이부분이 궁금하시면 따로 확인을 해보시면 될 듯 합니다…저는 딱히 안 궁금해서 ㅠㅠ<br><blockquote><p>– 2018-11-02 추가 시작<br>Code 128 A: Partial ASCII set, no lower case, but ASCII control chars (TAB, CR/LF etc.)<br>Code 128 B: Full ASCII set, no ASCII control chars<br>Code 128 C: Only digits 0-9, encoded in pairs, very compact code<br>A,B,C 의 명칭이 그 닥 공식화 되어있지 않지만 대충 A,B,C라고 부르네요 그냥 다들 ㅡㅡ;;<br>각 코드셋이 수용할 수 있는 범위가 명시 되어있는 정보를 찾아서 내용을 추가합니다.<br>– 2018-11-02 추가 끝</p></blockquote><br>code128 codeset별 codevalue 참고</p><p>코드표에서 보면 Start Code A(211412), Start Code B(211214), Start Code C(211232)<br>가 명시 되어있는 것을 확인하실 수 있습니다.<br>예를 들어 Start Code B(211214)<br>11010010000 211214 는<br>검검흰검흰흰검흰흰흰흰 으로 이루어진<br>■■□■□□■□□□□ 처럼 생긴 바코드로 표현이 되겠지요</p><h2 id="Encoded-data"><a href="#Encoded-data" class="headerlink" title="Encoded data"></a>Encoded data</h2><p>여긴 말그대로 데이터입니다.<br>소스로 구현시에는 가장 복잡하게? 들어가겠죠 ㅎ?, 데이터 다루는 부분은 따로 정리하겠습니다.</p><h2 id="Check-symbol"><a href="#Check-symbol" class="headerlink" title="Check symbol"></a>Check symbol</h2><p>체크섬 공식에 의한 검증코드값이 같이 들어갑니다, 이건 메세지가 리더기에서 정확하게 읽혔는가 검증하기위한 값이라고 생각하시면 됩니다.</p><p>문자열의 자리 수 * 문자 값 들의 합에 103으로 나눈 나머지에 해당하는 코드 값이 code128에서 Check symbol 값이 되겠습니다.</p><p>LeeJungKyu &lt;- 이건 나중에 소스에서 다시 설명 드리겠지만 codeset A냐 codeset B냐의 검증을 거쳐보면 codeset B라는 결론이 나는 문자열입니다..해서!!!</p><p>LeeJungKyu 문자열을 Start Code B로 시작하는 값을 code128로 한번 만들어 보겠습니다.</p><p>L : 첫번째 자리니까 1 * L의 문자 값 =&gt; 1 * 44</p><p>  ??? : 여기서 왜 L의 문자 값이 44인가 갑자기 이해가 안가시는 분들은 barcode 128 codeset 가셔서 128B값에 대문자 L 인곳으로 가보시면</p><p>Value   128A    128B    128C    Font position<br>(Common/Barcodesoft)    Bar/Space<br>Code    Latin-1 Pattern Widths<br>44  L   L   44  76  L   10001101110 132131</p><p>뙇 하고 확인하실 수 있습니다.</p><p>그럼 다시 정리해 보겠습니다.</p><p>L : 첫번째 자리니까 1 * L의 문자 값 =&gt; 1 * 44 = 44<br>e : 두번째 자리니까 2 * e의 문자 값 =&gt; 2 * 69 = 138 ( 사실 여기에서 힌트가 codeset A에선 소문자 e 표현이 없습니다 )<br>e : 세번째 자리니까 3 * e의 문자 값 =&gt; 3 * 69 = 207<br>J : 네번째 자리니까 4 * J의 문자 값 =&gt; 4 * 42 = 168<br>u : 다섯번 째 자리니까 5 * u의 문자 값 =&gt; 5 * 85 = 425<br>n : 여섯 번째 자리니까 6 * n의 문자 값 =&gt; 6 * 78 = 468<br>g : 일곱 번째 자리니까 7 * g의 문자 값 =&gt; 7 * 71 = 497<br>K : 여덟 번째 자리니까 8 * K의 문자 값 =&gt; 8 * 43 = 344<br>y : 아홉 번째 자리니까 9 * y의 문자 값 =&gt; 9 * 89 = 801<br>u : 열 번째 자리니까 10 * u의 문자 값 =&gt; 10 * 85 = 850</p><p>분명 공식은 문자열의 자리 수 * 문자 값 들의 합에 103으로 나눈 나머지 라 했습니다 ㅋ<br><blockquote><p>2018-11-16 추가 및 수정 ** 중요<br>체크섬계산에 관한 엄청난 잘못된 점이 있어서 ㄷㄷ…수정합니다<br>다른 건 틀린 게 없는데 더할 때 맨처음에 StartSymbol 의 문자 값(Value)을 더해야 합니다, 그러니…결국 ㅠㅠ Checksum 값이 여기서 먼저 보신분처럼 하면 다르겠죠 결국 그걸로 바코드 찍히긴 합니다만….검증시에 계속 에러가 나고있었네요…. 죄송합니다 ㅠㅠ</p></blockquote><br>그러면!!!<br>104(Start Code B 의 Value) + 44 + 138 + 207 + 168 + 425 + 468 + 497 + 344 + 801 + 850 = <del>3,942</del> 4,046</p><p><del>3,942를 103으로 나누면 = 38.271844660194176</del><br>4,046을 103으로 나누면 = 39.2815533980583</p><p>참고 : 여기서 나머지를 구하는건 나머지를 구하는 알고리즘을 따로 찾아보시기 바랍니다.(산수시간인가요 ㅎㅎ?)</p><p><del>여기서 몫 : 38 / 나머지 : 28</del><br>여기서 몫 : 39 / 나머지 : 29</p><p>이란 결과를 얻을 수 있습니다, 그럼 <del>28</del>29 이 표현되는 codeset B에 <del>&lt;</del>= 기호가 Check symbol이 되겠습니다.!!!!</p><p>Start symbol/LeeJungKyu<del>&lt;</del>=/Stop symbol</p><p>최종 이런 모습이 데이터가 되겠네요..나중에 확인했는데 틀리면 망신인데요…..<br>하…다시 노가다를</p><p>Start Code B : 211214  =&gt; 11010010000</p><p>L : 132131 =&gt; 10001101110<br>e : 112214 =&gt; 10110010000<br>e : 112214 =&gt; 10110010000<br>J : 112133 =&gt; 10110111000<br>u : 124211 =&gt; 10011110010<br>n : 241112 =&gt; 11000010100<br>g : 122114 =&gt; 10011010000<br>K : 112331 =&gt; 10110001110<br>y : 212141 =&gt; 11011011110<br>u : 124211 =&gt; 10011110010<br><del>&lt; : 322112 =&gt; 11100110100</del><br>= : 322211 =&gt; 11100110010</p><p>Stop pattern : 2331112 =&gt; 1100011101011<br>LeeJungKyu 란 문자를 code128식의 바코드 형태로 변경하면<br>211214132131112214112214112133124211241112122114112331212141124211<del>322112</del>3222112331112<br>가 되는 겁니다 .</p><p>마지막으로 패턴으로 변경하면<br>1101001000010001101110101100100001011001000010110111000100111100101100001010010011010000101100011101101101111010011110010<del>11100110100</del>111001100101100011101011</p><p>0과 1로 그림을 그리는데 1개의 숫자는 일정한 사이즈로 선을 그립니다 여기서 맨 처음 Quiet zone 을 다시 생각해보면 1개의 숫자가 그어지는 선의 10배만큼씩 좌우로 여백을 주고 안에다 그려야 한다는 말이었다고 이해가 되시는 지 모르겠습니다.</p><blockquote><p>왜 도대체 2331112가 1100011101011로 변환되는가를 고민하시는 분들이 계실 까봐…<br>barcode 128 codeset 여기를 다시 보시죠 자세히..ㅋㅋ<br>Widths죠? Pattern이고요 Widths는 규칙이 있습니다..사실 이게 저도 정확하게 궁금한 부분인데 Widths값이 Pattern값으로 변환되는 규칙은 저는 BWB(Black White Black)으로 외워서 알고있거든요…깊게 찾아보지 않고 그냥 그렇게 외우고 있습니다 ㅠㅠ<br>즉 말해서 블랙화이트블랙순으로 Widths의 값만큼 그리는 겁니다 블랙을 1 화이트를 0으로 하면<br>2331112를 풀어 말하면 블랙2 화이트3 블랙3 화이트1 블랙1 화이트1 블랙2 이렇게 되는 거죠 이걸 그대로 0과1로 표현하되 1이상의 숫자는 반복하는 거로 적으면 그냥<br>1100011101011 이 됩니다 ㅋㅋ 잘 아시는 분 댓글 좀 제가 잘못 알고 있는 거면 전 망했네요..</p></blockquote><p>숫자가 연속되면 두꺼워지는 것 처럼 보이겠죠 바코드에서 많이 보던 느낌 살아나죠?<br><img src="/images/2018/code128_LeeJungKyu.png" class="center" title="ljk"><br>실제로 바코드로 그려진 이미지 입니다, 만약!! 아주 만약 정말 이걸 수작업으로 오차없이 그리실 수 있다고 하면(사실 바코드가 선의 농도도 체크한다는데..이건 나중에 알아봐야 할 듯합니다) 재미삼아 해보세요..</p><p>요즘은 리더기 아니더라도 앱으로 리더기들이 많아서 찍어 보시면 재미있을지도 모릅니다 - _-</p><h2 id="Stop-symbol"><a href="#Stop-symbol" class="headerlink" title="Stop symbol"></a>Stop symbol</h2><p>사실 위에서 다뤘습니다..순서도 뒤죽박죽이네요 ㅋㅋ 이것 역시 마지막이라는 신호입니다.</p><p>우선 이론 편…여기서 마치겠습니다<br>왜???이론 편이냐??????<br>전 이거 그냥 공부하려고 정리한 건 아니거든요 ㅡㅡ;;<br>이 1차원 바코드 그리러 Visual Studio 켜야 지 않겠습니까 ㅋ?<br>감사합니다.</p>]]></content>
      
      
      <categories>
          
          <category> MES </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Barcode </tag>
            
            <tag> Code128 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Backflush</title>
      <link href="/2018/10/31/Backflush/"/>
      <url>/2018/10/31/Backflush/</url>
      
        <content type="html"><![CDATA[<blockquote><p>간단히 말해 선 집행 후 처리 라고 보면 될 듯 합니다.<br>빈번하게 나가는 재고를 일일이 기록하면서 보관하면 기록하는데 낭비되는 시간이 많을 것.<br>이 때문에 빈번하게 나가는 재고를 우선 작업을 하고 나서 나중에 처리를 한다고 생각하면 되겠습니다.</p><p>backflush는 재고 불출의 한 방법입니다.<br>생산은 Input을 output으로 바꾸는 것을 의미합니다.<br>즉 order을 하게 되면 input의 부품은 재고에서 사라지고 가치가 부과된 제품이 나오는 거죠.<br>이를 재고 장부 측면에서 보면 부품은 불출(issue)되어야 하고 새로운 제품이 입고(receipt)되어야 하죠.<br>이를 처리하는 간단한 방법이 backflush입니다.<br>제품이 완성되면 해당 order에 필요한 자재를 BOM과 같은 소요자재목록표를 이용해 자동으로 해당 수량만큼 불출하는 것입니다.<br>원래는 반복생산에서 나왔지만 편리성 때문에 주문제작(make-to-order)방식에서도 많이 사용하고 있습니다.</p><footer><strong>NAVER Blog</strong><cite><a href="http://blog.naver.com/PostView.nhn?blogId=wjdwodn1119&logNo=70162938290" target="_blank" rel="noopener">Backflush</a></cite></footer></blockquote>]]></content>
      
      
      <categories>
          
          <category> MES </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Backflush </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>POP (Point Of Production, 생산시점관리 시스템)</title>
      <link href="/2018/10/29/POP-Point-Of-Production-%EC%83%9D%EC%82%B0%EC%8B%9C%EC%A0%90%EA%B4%80%EB%A6%AC-%EC%8B%9C%EC%8A%A4%ED%85%9C/"/>
      <url>/2018/10/29/POP-Point-Of-Production-%EC%83%9D%EC%82%B0%EC%8B%9C%EC%A0%90%EA%B4%80%EB%A6%AC-%EC%8B%9C%EC%8A%A4%ED%85%9C/</url>
      
        <content type="html"><![CDATA[<blockquote><p>생산계획 및 작업지시에 의거 생산현장에서 발생하는 각종 정보, 즉 계획 대비 실적관리, 재고관리, 재공관리, 불출관리, 불량정보관리, 설비가동/비가동 정보관리, 라인별/공정별 생산현황 정보를 실시간으로 집계, 분석, 조회할 수 있는 시스템입니다.</p><footer><strong>ZIN Corporation</strong><cite><a href="http://www.zin.co.kr/default.php?eng_cd=100&m1=3&m2=6" target="_blank" rel="noopener">POP</a></cite></footer></blockquote>]]></content>
      
      
      <categories>
          
          <category> MES </category>
          
      </categories>
      
      
        <tags>
            
            <tag> POP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PR, PO(Purchase Order, 구매 발주)</title>
      <link href="/2018/10/29/PR-PO-Purchase-Order-%EA%B5%AC%EB%A7%A4-%EB%B0%9C%EC%A3%BC/"/>
      <url>/2018/10/29/PR-PO-Purchase-Order-%EA%B5%AC%EB%A7%A4-%EB%B0%9C%EC%A3%BC/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Order Sheet와 같은 뜻으로 사용되는 용어로서 일종의 개별계약서이다. 매매계약이 성립된 후에 계약내용을 확인하기 위하여 수입업자가 작성하여 수출업자에게 송부한다.</p></blockquote><p>PR PO<br>P.O : PURCHASE ORDER (구매 발주)<br>B.O.M : BILL OF MATERIAL (도면상에 표기하는 재질 등을 비롯한 자재 정보 리스트)<br>P.O.R (PR) : PURCHASE ORDER REQUISITION (구매 발주 요청서)<br>POR은 설계쪽에서 발행하여 구매로 보내는 구매발주요청서이며,BOM(자재목록표)와 POS(구매사양서,Purchase Order Specification)과 같이 보냅니다. POS는 구매물품의 규격등을 표시한 도면이나 자료 등을 말하구요.<br>POR을 접수한 구매에서는 업체로 PO(구매발주서)를 보내지요.</p>]]></content>
      
      
      <categories>
          
          <category> MES </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PR </tag>
            
            <tag> PO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Silo</title>
      <link href="/2018/10/29/Silo/"/>
      <url>/2018/10/29/Silo/</url>
      
        <content type="html"><![CDATA[<blockquote><p>풋바심 작물이나 목초를 채워 엔실리지(ensilage)를 만들기 위하여 돌·벽돌·콘크리트 등으로 만든 저장고. 저장탑. 순화어는 <code>저장탑&#39;,</code>저장 창고’.</p></blockquote><blockquote><p>2018-11-05 추가 시작</p><p>사일로는 단순하게 저장을 위한 용도이기도 하지만 그 저장 이라는 의미가 다음공정으로 가기위한 대기상태인 경우가 많은듯 합니다, 흔히 말하는 창고 개념은 아니었더라고요, 포장 사일로 이런식으로 표현하면 포장되기위한 공정에 직전에있는 저장상태 정도로 인식하면 될듯하고 배합 사일로 이건 1개의 원료가 아닐때 혼합을 위한 사일로 용도로도 사용되는듯 합니다 화학 공정을 정확하게 아직 이해한 상태는 아니지만 저장탑, 저장 창고 처럼 위에 명시한 용도로 사용되는건 산업군마다 느낌이 조금씩은 다른듯 합니다.</p><p>2018-11-05 추가 끝</p></blockquote><blockquote><p>2018-11-21 추가</p><p>스타크레프트 1 하다보니..(심심해서 ….) 테란 핵 만들면 옆에 붙는게 nuclear silo 였다 </p></blockquote>]]></content>
      
      
      <categories>
          
          <category> MES </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Silo </tag>
            
            <tag> 저장고 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WMS (Warehouse Management System, 창고관리시스템)</title>
      <link href="/2018/10/25/WMS-Warehouse-Management-System-%EC%B0%BD%EA%B3%A0%EA%B4%80%EB%A6%AC%EC%8B%9C%EC%8A%A4%ED%85%9C/"/>
      <url>/2018/10/25/WMS-Warehouse-Management-System-%EC%B0%BD%EA%B3%A0%EA%B4%80%EB%A6%AC%EC%8B%9C%EC%8A%A4%ED%85%9C/</url>
      
        <content type="html"><![CDATA[<blockquote><p>WMS(Warehouse Management System)은 기업 ’전체 재고 에 대한 가시성을 제공하고 제조 업체 또는 도매 유통 업체부터 물류 창고, 소매 유통 업체, 그리고 마지막으로 매장 진열대에 이르기까지 공급망 주문 이행 업무를 관리하는 소프트웨어 솔루션입니다</p><footer><strong>ORACLE</strong><cite><a href="https://www.oracle.com/kr/applications/supply-chain-management/solutions/logistics/warehouse-management/what-is-warehouse-management.html" target="_blank" rel="noopener">WMS</a></cite></footer></blockquote>]]></content>
      
      
      <categories>
          
          <category> MES </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WMS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EP(Engineering Plastics, 엔지니어링 플라스틱)</title>
      <link href="/2018/10/25/EP-Engineering-Plastics-%EC%97%94%EC%A7%80%EB%8B%88%EC%96%B4%EB%A7%81-%ED%94%8C%EB%9D%BC%EC%8A%A4%ED%8B%B1/"/>
      <url>/2018/10/25/EP-Engineering-Plastics-%EC%97%94%EC%A7%80%EB%8B%88%EC%96%B4%EB%A7%81-%ED%94%8C%EB%9D%BC%EC%8A%A4%ED%8B%B1/</url>
      
        <content type="html"><![CDATA[<p>EP라는 약어를 사용하는 용어는 아마 엄청 많을 것이지만….<br>지금 화학MES 공정에서 자주 등장하는 EP가 무엇일까 찾아보다가 정리합니다.<br><blockquote><p>일반 플라스틱의 물적 특성과 비슷하지만, 내열성과 내구성이 보다 뛰어나서 ‘고기능성 플라스틱’이라고도 불립니다. 그래서 전자기기의 케이스나 자동차의 외장 부품 등에 자주 사용되죠.</p><footer><strong>LG케미토피아 블로그</strong><cite><a href="https://blog.lgchem.com/2015/09/operation-interview/" target="_blank" rel="noopener">인터뷰 내용중</a></cite></footer></blockquote></p>]]></content>
      
      
      <categories>
          
          <category> MES </category>
          
      </categories>
      
      
        <tags>
            
            <tag> EP </tag>
            
            <tag> Engineering Plastics </tag>
            
            <tag> 화학 </tag>
            
            <tag> 기초소재 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Serial 통신</title>
      <link href="/2018/10/24/Serial-%ED%86%B5%EC%8B%A0/"/>
      <url>/2018/10/24/Serial-%ED%86%B5%EC%8B%A0/</url>
      
        <content type="html"><![CDATA[<p>시리얼이란?<br>시리얼은 거의 모든 PC에서 표준으로 사용되는 디바이스 통신 프로토콜입니다. 시리얼의 개념을 USB의 개념과 잘 구분하십시오. 대부분의 컴퓨터에는 2개의 RS232 기반 시리얼 포트가 있습니다. 시리얼은 또한 여러가지 디바이스에서 계측을 위한 일반 통신 프로토콜이며, 여러 GPIB 호환 디바이스에는 RS232 포트가 장착되어 있습니다. 뿐만 아니라, 원격 샘플링 디바이스로 데이터 수집을 하는 경우에도 시리얼 통신을 사용할 수 있습니다.</p><p>시리얼 통신의 개념은 간단합니다. 시리얼 포트는 정보의 바이트를 한번에 한 비트씩 순차적으로 송수신합니다. 한번에 전체 바이트를 동시에 전달하는 병렬 통신과 비교하면 시리얼 통신은 속도가 느리지만 훨씬 간단하며 장거리에도 사용할 수 있습니다. 예를 들어, 병렬 통신용 IEEE 488 스펙을 보면 기기간 케이블링은 총 20 m 미만이어야 하며, 두 개의 디바이스간은 2 m 미만이어야 합니다. 반면 시리얼 통신은 최대 1.2 Km의 통신거리를 보장합니다.</p><p>통상 엔지니어들은 ASCII 데이터를 전송할 때 시리얼 통신을 사용합니다. 이 때 송신용 (Tx), 수신용 (Rx), 그라운드용 (GND)의 세 가지의 전송 라인을 사용하여 통신합니다. 시리얼은 비동기식이므로 포트는 한 라인에서 데이터를 전송하고 다른 라인에서 데이터를 수신합니다. 핸드쉐이킹용 라인도 사용 가능하지만 필수 요구사항은 아닙니다. 시리얼 통신의 가장 중요한 특징에는 보드 속도 (baud rate), 데이터 비트, 정지 비트, 패리티가 있습니다. 두 개의 포트가 통신하기 위해서는 이러한 파라미터가 반드시 적절하게 맞춰져야 합니다.</p><p>보드 속도는 통신의 속도를 측정하는 수치이며 초당 비트 전송 숫자로 표시됩니다. 예를 들어 300 보드 속도는 초당 300 비트를 의미합니다. 엔지니어들이 흔히 말하는 클럭 주기는 보드 속도를 의미합니다. 따라서 프로토콜에 4800 보드 속도라고 나오는 경우 클럭이 4800 Hz로 작동한다는 뜻입니다. 즉, 시리얼 포트는 4800 Hz로 데이터 라인을 샘플링합니다. 전화선의 일반적인 보드 속도는 14400, 28800 또는 33600입니다. 보다 높은 속도도 가능하지만 그 경우 디바이스를 분리할 수 있는 거리가 줄어들게 됩니다. 따라서 엔지니어들은 디바이스가 같은 장소에 위치해 있는 디바이스 통신에 높은 보드 속도를 사용하게 되며, 그 예로 GPIB 디바이스를 들 수 있습니다.<br>데이터 비트는 전송되는 실제 데이터 비트의 측정값을 의미합니다. 컴퓨터가 정보 패킷을 보낼 때 실제 데이터의 양은 전체 8 비트가 되지 않습니다. 데이터 패킷의 표준 값은 5, 7, 8비트입니다. 어떤 정보를 전송하느냐에 따라 어떤 세팅을 선택할 지를 결정해야 합니다. 예를 들어, 표준 ASCII는 0 ~127 (7 비트)의 값을 가집니다. 확장된 ASCII는 0 ~ 255 (8 비트)를 사용합니다. 전송하려는 데이터가 단순 텍스트 (표준 ASCII)일 경우, 패킷당 7비트의 데이터를 보내면 통신에 무리가 없습니다. 패킷은 단일 바이트 전송을 의미하며, 시작/정지 비트, 데이터 비트, 패리티가 포함됩니다. 실제 비트의 수는 선택된 프로토콜에 따라 달라지므로 모든 경우를 포괄하는 “패킷”이라는 용어를 사용합니다.<br>정지 비트는 단일 패킷에 대한 통신의 종료를 알리는 데 사용됩니다. 일반적인 값은 1, 1.5, 2 비트입니다. 데이터는 모든 라인을 통해 클럭되며 각 디바이스에는 고유의 클럭이 있기 때문에 두 개의 디바이스는 동기화가 되지 않을 가능성이 있습니다. 따라서 정지 비트는 전송의 종료를 알려줄 뿐 아니라 클럭 속도 오류를 방지하기 위한 완충 역할을 합니다. 더욱 많은 비트가 정지 비트에 쓰이면 다른 클럭을 동기화할 수 있지만 데이터 전송 속도는 느려집니다.<br>패리티는 시리얼 통신에서 에러를 체크하는 데 사용됩니다. 패리티에는 짝수, 홀수, 마크, 스페이스 패리티의 네 가지 형태가 있습니다. “패리티 없음”을 사용할 수도 있습니다. 짝수 및 홀수 패리티를 이용하면, 시리얼 포트는 패리티 비트 (데이터 비트 뒤에 따라옴)를 특정 값으로 설정함으로써 전송에 logic-high bits가 짝수개 또는 홀수개 있음을 나타냅니다. 예를 들어, 데이터가 011이고 짝수 패리티를 선택했다면 logic-high bits가 짝수개 있으면 패리티 비트는 0 입니다. 홀수 패리티를 선택했다면 logic-high bits가 홀수개 (3개)이므로 패리티 비트는 1이 됩니다. 마크 패리티와 스페이스 패리티는 데이터 비트를 체크하는 기능이 없으며 단지 마크 패리티의 경우 패리티를 높게, 스페이스 패리티의 경우 패리티를 낮게 설정합니다. 따라서 수신 디바이스가 비트의 상태를 확인할 수 있게 되므로 소음으로 인한 데이터 방해 여부나 송수신 디바이스 클럭 동기화 여부 등을 알 수 있습니다.</p><p>RS232 개요<br>RS232는 IBM 호환 PC에서 쓰이는 시리얼 연결입니다. 엔지니어들은 컴퓨터를 센서 또는 모뎀에 연결하거나 계측기 컨트롤 등 여러 용도로 RS232를 사용합니다. RS232 하드웨어는 최장 15 m (50 ft)까지 통신 가능하며, PC 시리얼 포트와 디바이스간 포인트 투 포인트 연결로만 사용이 국한됩니다. 이러한 이유로 인해 추가의 RS232 시리얼 포트가 요구되기도 합니다. 표준 PC RS232 시리얼 포트 및 여러 시리얼 인터페이스 공급업체는 시리얼 통신에서 데이터 송수신에 Win32 API를 사용합니다. Win32 API는 원래 모뎀 통신을 위해 개발되었으며 전체 RS232 프로토콜을 실행하지 않으므로 특정 디바이스와 통신할 수 없습니다.</p><p>내쇼날인스트루먼트는 PCI, USB, PCMCIA, ExpressCard, PXI, 이더넷 등 여러 다양한 플랫폼에서 RS232 시리얼 인터페이스를 제공합니다. 플랫폼에 따라 NI Serial 인터페이스는 1, 2, 4, 8 및 16 포트 버전으로 사용 가능합니다. 또한, NI RS232 시리얼 인터페이스는 최고 1 Mb/s의 고속 보드 속도, DMA 전송을 통한 CPU 최소 사용, 최적화된 2000 V 포트간 절연, 구성 가능한 비표준 보드 속도와 같은 향상된 기능을 제공합니다. NI의 모든 시리얼 인터페이스에는 NI-Serial 드라이버 소프트웨어가 포함되므로 전체 RS232 프로토콜을 실행하고, 신속한 어플리케이션 개발을 위한 하이레벨, 사용하기 쉬운 함수를 제공합니다.</p><p>라고 합니다 ( 발췌본입니다 )</p><p>포장 공정에서 라벨프린터에 PLC랑 I/F를 위한 기반작업중이라 남겨놓습니다.!!</p>]]></content>
      
      
      <categories>
          
          <category> MES </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Serial Port </tag>
            
            <tag> RS232C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EIF (External Interface Files, 외부연계파일)</title>
      <link href="/2018/10/22/EIF-External-Interface-Files-%EC%99%B8%EB%B6%80%EC%97%B0%EA%B3%84%ED%8C%8C%EC%9D%BC/"/>
      <url>/2018/10/22/EIF-External-Interface-Files-%EC%99%B8%EB%B6%80%EC%97%B0%EA%B3%84%ED%8C%8C%EC%9D%BC/</url>
      
        <content type="html"><![CDATA[<blockquote><p>외부연계파일(EIF)은 사용자가 식별할 수 있는 논리적으로 연관된 데이터 그룹 또는 제어정보로, 다른 어플리케이션의 경계 내부에서 유지되고 측정 대상 어플리케이션이 참조한다. 외부연계파일(EIF)의 주요 의도는 측정 대상 어플리케이션 경계 내의 하나 또는 그 이상의 단위 프로세스를 통하여 참조된 데이터를 보관하는데 있다. 이것은 특정 어플리케이션에서 외부연계파일(EIF)로 측정된 것은 반드시 다른 어플리케이션의 내부논리파일에 존재해야 함을 의미한다.</p></blockquote><p>이라는 데 확실히 감이 안 잡히네요…<br><blockquote><p>2018-11-21 추가<br>EIF라는게 물리적은 파일일줄 알았는데….S/W형태로 EIF 서버를 구축해서 PLC나 마킹기 전자저울 등의 정보를 수집하는 망을 통한 I/F를 프레임웍화 해 놓은 하나의 시스템을 말하는 경우가 많다는 걸 알았습니다…UI <-> EIF서버 <-> PLC(마킹기 등등..)의 정보전달을 전담하는 역할을 하더라고요..</-></-></p></blockquote></p>]]></content>
      
      
      <categories>
          
          <category> MES </category>
          
      </categories>
      
      
        <tags>
            
            <tag> EIF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SCM(Supply Chain Management, 공급망 관리)</title>
      <link href="/2018/10/18/SCM-Supply-Chain-Management-%EA%B3%B5%EA%B8%89%EB%A7%9D-%EA%B4%80%EB%A6%AC/"/>
      <url>/2018/10/18/SCM-Supply-Chain-Management-%EA%B3%B5%EA%B8%89%EB%A7%9D-%EA%B4%80%EB%A6%AC/</url>
      
        <content type="html"><![CDATA[<blockquote><p>공급망관리 연구실 (Operations &amp; Supply Chain Management Laboratory)에서는<br>생산 시스템의 계획에서부터 운영 및 물류에 이르는 생산에 관련된<br>전반적인 분야를 연구하고 있다.</p><p>산업공학이 다루는 여러 가지 학문 분야 중에서도<br>공급망관리, 재고관리, 일정계획, 시뮬레이션을 다루고 있으며<br>제조업체 및 서비스업체의 공급망에 대한 최적 설계와 운영 전략 제시를 연구하고 있다.</p><p>주로 사용하는 기법은 수리계획법, 휴리스틱 및 메타휴리스틱 기법, 시뮬레이션을 사용하고 있으며,<br>프로토타입 시스템 개발도 수행하고 있다.</p><p>연구 과제들을 수행하기 위하여 Tex, Gauss, Arena, Siman, Lindo, Lingo 등의 주요 소프트웨어와<br>Visual Basic, Delphi, C, C++, Visual C++, Java, C#, API, MS SQL,등의<br>프로그래밍 언어들을 활용하고 있다.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> MES </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SCM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NCR(Non-Conformance Report, 부적합사항보고서)</title>
      <link href="/2018/10/17/NCR-Non-Conformance-Report-%EB%B6%80%EC%A0%81%ED%95%A9%EC%82%AC%ED%95%AD%EB%B3%B4%EA%B3%A0%EC%84%9C/"/>
      <url>/2018/10/17/NCR-Non-Conformance-Report-%EB%B6%80%EC%A0%81%ED%95%A9%EC%82%AC%ED%95%AD%EB%B3%B4%EA%B3%A0%EC%84%9C/</url>
      
        <content type="html"><![CDATA[<p>부적합의 기준은 공정, 산업마다 다르겠지만</p><p>규정(규격에 맞지 않는)되지 않은 부적합품 발생시, Lot No, 수량, 부적합 발생 내용 등을 적는 보고서 라고 합니다.</p><p>보고서 작성 이후 프로세스를 통하여 그냥 사용할지, 폐기할지 등의 결정이 됩니다, 또한 이후에 검사(검증)절차와 시험을 다시 시행해야 한다고 합니다.</p><p>PNCR이란 말도 들어본듯 한데, Process-NCR로 받아들여지긴 하는데 아직은 잘 모르겠네요.</p>]]></content>
      
      
      <categories>
          
          <category> MES </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NCR </tag>
            
            <tag> PNCR </tag>
            
            <tag> QMS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RTDB(Real-Time Database, 실시간 DB)</title>
      <link href="/2018/10/16/RTDB-Real-Time-Database-%EC%8B%A4%EC%8B%9C%EA%B0%84-DB/"/>
      <url>/2018/10/16/RTDB-Real-Time-Database-%EC%8B%A4%EC%8B%9C%EA%B0%84-DB/</url>
      
        <content type="html"><![CDATA[<p>제 입장에서 RTDB보단 RDB(Relational Database, 관계형 DB)가 익숙합니다 뭐 Oracle이나 MS-SQL, MariaDB 같은걸 사용해왔으니까요…</p><p>사실 이 글을 작성하는 (2018-10-16) 기준으로는 RDB도 실시간이지 않나? 라는 생각을 해봅니다만은..ㅠㅠ</p><p>그래서 용처에따른 구분을 하고싶어서 검색해본 결과로는<br><blockquote><p>RTDB (Real-Time Database)는 현장의 운전 데이터 (Process Variable, Set Point, Output, Mode, 등)를 실시간으로 수집하여 저장하여 시스템입니다.</p><p>주로 RTDB의 데이터는 Time Stamp, Tag, Description, Value, Confidence를 가진 단순 데이터로써, ORACLE / MS-SQL 같은 RDB (Relational DataBase) 보다는 사용자가 찾을 때 빠르게 데이터를 지원할 수 있도록 시간 순으로 ASCII 형태로 차곡 차곡 쌓아놓는 방식으로 저장 합니다.</p><p>물론, Tag 관련 정보 (Tag Name, Description, Data Type, Range, Set Value, 등)는 RDB에 저장하는 것이 효과적입니다. 따라서 잘 설계된 RTDB는 RDB와 상호 연결이 쉽도록 구성되어 있습니다.</p><p>또한, RTDB는 전문가가 아닌 현업을 잘 알고 있는 공정 엔지니어들이 운전 / 이력 / 생산 / 경보 / 설비 관리를 위하여 쉽게 할 수 있도록 다양한 Application 기능들이 포함되어 있어야 합니다.</p><footer><strong>DB사랑넷</strong><cite><a href="http://database.sarang.net/?inc=read&aid=984&criteria=dbms&subcrit=&id=&limit=20&keyword=sqlite&page=2" target="_blank" rel="noopener">RTDB</a></cite></footer></blockquote><br>에서 읽었던 댓글이 이해가 빠르게 되더라고요.</p><p>실제로 이번 참여하고있는 MES프로젝트에서도 RTDB의 용도는 현장의 운전데이터에 집중되어 사용되고 있네요</p>]]></content>
      
      
      <categories>
          
          <category> MES </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RTDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DCS ( Distributed Control System, 분산제어시스템)</title>
      <link href="/2018/10/16/DCS-Distributed-Control-System-%EB%B6%84%EC%82%B0%EC%A0%9C%EC%96%B4%EC%8B%9C%EC%8A%A4%ED%85%9C/"/>
      <url>/2018/10/16/DCS-Distributed-Control-System-%EB%B6%84%EC%82%B0%EC%A0%9C%EC%96%B4%EC%8B%9C%EC%8A%A4%ED%85%9C/</url>
      
        <content type="html"><![CDATA[<p>공정제어에 적용되는 시스템을 각 플랜트에 알맞은 단위 서브 시스템으로 분리하고 소단위 시스템에서는 각각의 주어진 역할을 수행하며, 상호간에 통신이 가능하도록 하는 시스템이라고 합니다.</p><a href="https://m.blog.naver.com/PostView.nhn?blogId=dohyuni1018&logNo=80042831296&proxyReferer=http%3A%2F%2Fwww.google.co.kr%2Furl%3Fsa%3Dt%26rct%3Dj%26q%3D%26esrc%3Ds%26source%3Dweb%26cd%3D1%26ved%3D2ahUKEwjdq5_H8ozeAhVHU7wKHdUnCvkQFjAAegQICRAB%26url%3Dhttp%253A%252F%252Fm.blog.naver.com%252Fdohyuni1018%252F80042831296%26usg%3DAOvVaw2Oouc0GsuMnw7y_N3Qi_bi" title="target=_blank" target="_blank" rel="noopener">참고링크</a>]]></content>
      
      
      <categories>
          
          <category> MES </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DCS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PLC (Programmable Logic Controller, 프로그램 가능 로직 제어기)</title>
      <link href="/2018/10/16/PLC-Programmable-Logic-Controller-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8-%EA%B0%80%EB%8A%A5-%EB%A1%9C%EC%A7%81-%EC%A0%9C%EC%96%B4%EA%B8%B0/"/>
      <url>/2018/10/16/PLC-Programmable-Logic-Controller-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8-%EA%B0%80%EB%8A%A5-%EB%A1%9C%EC%A7%81-%EC%A0%9C%EC%96%B4%EA%B8%B0/</url>
      
        <content type="html"><![CDATA[<p>산업 플랜트의 자동 제어 및 감시에 사용하기 위한 장치라고 합니다.</p><p>단독으로 쓰일 수도 있지만, SCADA 등의 시스템과 함께 사용되기도 한다고 하네요.</p><p>제어장치의 일종으로 초기 자동화시스템에서 회로도에따라 릴레이, 접점, 타이머, 카운터 등을 직접 접속하여 사용했는데 다품종 소량생산에 대응을 위해서 많은 시간과 비용이 요구되기 때문에 이를 유연하게 대처할 수 있는 방안으로 등장했다고도 합니다.</p><p>정말 쉽게는 그냥 각 고정 기기에서 연결된 수행 내용을 작성해서 저장해두면 각종 기계나 공정을 제어하게 해주는 PC같은거 라고 생각하면 될듯 합니다.</p><p>아두이노나…..라즈페리파이도 PLC같은거로 사용할 수 있을까요 ㅎㄷㄷ??(역활은 비슷한거같은데 ;)</p>]]></content>
      
      
      <categories>
          
          <category> MES </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PLC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>생산전략 (MTS, MTO)</title>
      <link href="/2018/10/16/%EC%83%9D%EC%82%B0%EC%A0%84%EB%9E%B5-MTS-MTO/"/>
      <url>/2018/10/16/%EC%83%9D%EC%82%B0%EC%A0%84%EB%9E%B5-MTS-MTO/</url>
      
        <content type="html"><![CDATA[<p>MTO : Make to Order - 주문 생산 방식</p><ul><li>고객주문 요청 시점부터 생산을 시작하는 방식이라고 합니다 , 요청의 수용범위는 낮으며 생산속도는 빠르다고 합니다, 원하는 것만 생산하기 때문에 낭비가 적고 다양한 요구가 증대되기에 신제품 출시 재고/비용 절감 등의 효과를 볼 수 있는 방식이라고 합니다.</li></ul><p>MTS : Make to Stock - 계획 생산 방식</p><ul><li>그럼 MTO가 좋아 보이는데…이런 개념이 나왔을까 하긴 했었는데 상황에 따라서 사용되기도 한다고 합니다, 일단 확보된 재고를 다 판매하게 될지는 알수없는건 당연하겠지만 재고자체의 가치가 달라지는 상황에 따른 손익이 발생할 수 있으며 최악은 그저 재고로만 남게 되는 경우도 있을 수 있겠네요 이를 위해서 재고관리를 좀더 신경 써야 하는 방식이라고 합니다.</li></ul>]]></content>
      
      
      <categories>
          
          <category> MES </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MTS </tag>
            
            <tag> MTO </tag>
            
            <tag> 생산전략 </tag>
            
            <tag> 주문생산 </tag>
            
            <tag> 재고생산 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BOM(Bill Of Material, 자재명세서)</title>
      <link href="/2018/10/15/BOM-Bill-Of-Material-%EC%9E%90%EC%9E%AC%EB%AA%85%EC%84%B8%EC%84%9C/"/>
      <url>/2018/10/15/BOM-Bill-Of-Material-%EC%9E%90%EC%9E%AC%EB%AA%85%EC%84%B8%EC%84%9C/</url>
      
        <content type="html"><![CDATA[<blockquote><p>자재 명세서 (Bill of Materials, BOM)은 제품을 구성하는 모든 부품들에 대한 목록이다. 부품이 복잡한 요소들로 구성되어 있는 조립 품인 경우에는 계층적인 구조로 작성될 수 있다.</p><footer><strong>위키</strong><cite><a href="https://ko.wikipedia.org/wiki/%EC%9E%90%EC%9E%AC_%EB%AA%85%EC%84%B8%EC%84%9C" target="_blank" rel="noopener">자재 명세서</a></cite></footer></blockquote><p>BOM, MMD, PLM 등의 단어를 엄청 들어보면서 먼저 BOM을 정리해봅니다..기준정보 라고 불리는 ERP를 포함한 도메인에서 관리하는 정보형태 같습니다.</p><p>BOM과 처방전을 화학에서는 같이 사용하던데 느낌상 BOM은 최초 발행된 조합 정보이며 처방전은 실제 생산하면서 배합 양 비율 등이 조정되는 업데이트 되는 정보라고 이해하고있습니다.</p>]]></content>
      
      
      <categories>
          
          <category> MES </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BOM </tag>
            
            <tag> Bill Of Meterial </tag>
            
            <tag> 자재명세서 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lot No, Batch No</title>
      <link href="/2018/10/11/Lot-No-Batch-No/"/>
      <url>/2018/10/11/Lot-No-Batch-No/</url>
      
        <content type="html"><![CDATA[<blockquote><p>제조단위는 동일한 조건 아래에서 만들어진 균일한 특성 및 품질을 갖는 제품군이다. 로트(lot), 배치(batch)라고도 한다. 제조단위를 나타내는 번호를 제조단위번호라고 하며 제조번호, 로트번호(lot number), 배치번호(batch number)라고도 한다.</p><footer><strong>위키</strong><cite><a href="https://ko.wikipedia.org/wiki/%EC%A0%9C%EC%A1%B0_%EB%8B%A8%EC%9C%84" target="_blank" rel="noopener">제조 단위</a></cite></footer></blockquote><p>흠..제일 많이 듣는말 중에 하나인 듯하고 역시 lot tracking (로트 추적)에 관련된 대화 이슈들이 많이 들립니다.</p><p>lot number (로트 번호)가 같다 라는 개념을 1개의 공정에서 나온 결과물에 부여되는 일련번호 라고 이해하고있는 상황이며</p><p>AAA 라는 고유제품코드를 가진 제품이 있으며</p><p>이것이 3개의 라인(같은 공정)에서 생산되고있으면<br>1라인 : AAA-01<br>2라인 : AAA-02<br>3라인 : AAA-03<br>이런 식으로 구분한다 라는 정도로 이해하고 있습니다 ㅋㅋ 맞나 ㅠㅠ</p><p>lot 번호를 부여하는 방식은 기업마다 Rule을 정해서 부여하는듯 하며 이를 통합 Barcode시스템연동시 부여된 번호를 관리하는 포인트가 생기는듯 합니다.</p><p>lot 번호의 목적은 역으로 추적하기 위함이 가장 많은 듯 하다(현재 까지 종합해본 결론은…), 불량이 나거나 결과물에 문제 발생시</p><p><em>몇 날 몇일 몇시즈음에 어느 공정에서 문제가 생긴 건지</em> 를 알기 위함이 가장 크게 적용되는듯 합니다…</p><p>Batch = 생산계획에 의해 한번 셋팅으로 생산하는 단위<br>Lot = 그 Batch에 이어 나오는 제품 단위를 의미</p><p>아직은 이렇게 이해하고 접근하고 있지만 마침 제가 담당하게 될 부분이 통합라벨관리(채번까지인지 ..ㅠ?)가 되어서 앞으로 도 확실히 정리해야 하겠습니다~</p>]]></content>
      
      
      <categories>
          
          <category> MES </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Lot No </tag>
            
            <tag> Batch No </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Barcode</title>
      <link href="/2018/10/10/Barcode/"/>
      <url>/2018/10/10/Barcode/</url>
      
        <content type="html"><![CDATA[<img src="/images/2018/interleaved2of5.jpg" class="center" title="barcode"><p>바코드는 1948년 미국에서 발명했다고 합니다.</p><p>다양한 폭을 가진 Bar(검은 막대부분)와 Space(흰색막대?)의 배열 패턴입니다, 조합에 의해 영 숫자, 기호 등을 광학적으로 판독하기 쉽게 부호화 한 것 입니다.</p><p>2진 코드로 부호화 해서 Bar와 Space의 농도,굵기를 다르게 표함으로써 “0”, “1”을 나타내는 직렬신호의 조합으로 표현됩니다.<br><blockquote><p>1970년대 초반 IBM 사는 음식 포장지에 스캐너로 가격과 음식 정보를 판독할 수 있는 코드를 디자인해 달라는 주문을 받았습니다. 당시 이 일을 맡았던 IBM사의 엔지니어 조지 로러(George Laurer) 씨는 1940년대에 조셉 우드랜드(Joseph Woodland) 씨가 개발한 황소의 눈동자 모양으로 생긴 원형의 스캔 코드를 기반으로 하라는 요청을 받았습니다. 하지만 그는 이 원형 코드에서 문제점을 발견했습니다. 고속 인쇄기로 원모양의 스캔 코드를 포장지에 인쇄할 경우 원의 모양 중 훼손되는 부분이 발생할 확률이 크고 스캐너가 이를 인식하지 못할 가능성이 커지는 겁니다. 따라서 그는 좁고 긴 막대 모양의 코드를 발명했습니다. 로러 씨가 발명한 새로운 코드는 바코드라고 더 잘 알려진 통일 상품코드(Universal Product Code)로 1973년 식료품점 컨소시엄이 채택한 이후 전 세계에서 이용되고 있습니다. 바코드를 개발하게 된 배경에 대해서 로러 씨는 자신의 실수 때문에 가격이 찍히지 않을까 두려워하는 식료품 점원들이 있었다고 말합니다. 예를 들어 냉동 식품을 다루는 사람들은 제품에 얼음이 붙어 있어 제품의 가격이 잘 찍히지 않을 경우 그것이 자신의 탓으로 여겨지는 것이 두려워 제품의 특성이나 환경에 관계 없이 가격을 확인할 수 있는 시스템을 원했고 이렇게 해서 바코드가 탄생하게 된 것입니다. 로러 씨는 사람들에게 자신이 바코드를 발명했다고 말하면 돈을 많이 벌었을 것이라고 가정하지만 실제로 그는 아무런 저작권료를 받지 않았습니다. IBM 역시 이를 특허로 신청하지 않았습니다.</p><footer><strong>NewsPeppermint</strong><cite><a href="http://newspeppermint.com/2013/01/06/%EB%B0%94%EC%BD%94%EB%93%9C%EB%8A%94-%EB%88%84%EA%B0%80-%EB%B0%9C%EB%AA%85%ED%96%88%EB%82%98/" target="_blank" rel="noopener">바코드는 누가 발명했나?</a></cite></footer></blockquote><br>사실 뭐가 맞는 말이던간에 Barcode에 대한 공부를 위한 기분 전환입니다 ㅋ..</p><p>결국 바코드는 컴퓨터가 2진수로 인식할 수 있게 만든 것입니다, 이를 스캐너를 통하여 읽을 수 있는데 검은 부분은 빛을 흡수해서 적은 양을 반사하고, 흰 부분은 많은 양의 빛을 반사합니다.</p><p>스캐너는 아날로그 - 디지털 변환기가 있어서 이를 통해 빛의 강약에 따라 전기신호로 변경되고 이 신호가 0,1 로 변환되어 다시 우리가 보는 문자 혹은 숫자로 나타나게 됩니다.<br><img src="/images/2018/170E841E4CCAA59850.jpg" class="center" title="원리"><br>자세한 설명은 위의 링크에서 잘 설명되어 있습니다, 저도 참고하고 공부중 입니다.</p><p>바코드 표준<br>기본 원리는 그렇다 치고 이를 실제 사용하거나 주고 받기위해서는 역시나 표준이 필요합니다.</p><p>바코드 자체의 전체 길이도 어느정도는 표준화 하지 않고 서는 리더기 장비를 만드는 업체는 여러 사이즈의 기계를 만들어야 하는 기본적인 비합리 함이 발생되기 때문이기도 하고 표준을 정하지 않고 사용하면 입출력의 시간을 줄이고 편리하게 사용하고자 하는 취지역시 이상한 방향으로 돌아가게 되지 않았을까 싶습니다.</p><p>역시 뭐든 표준이 정해지는 건 중요하다고 생각합니다 . ㅎ_ㅎ<br>정말 표준이라고 해도 역시 많은 표준이 있는데…<br>1973년 미국음식연쇄조합에서 세계상품코드(UPC)를 도입한 게 처음이고 등등등 가다가!</p><p>1988년 EAN국제기구에 가입하면서 우리나라는 국가 번호코드 880을 부여 받아 한국상품번호를 사용하고 있습니다, 이후에는 통합통합 하더니 미국과 유럽이 통합된 국제 표준코드인 GS1체계가 2005년 출범하였다고 합니다.</p><p>이후에는 실제 각 표준에 대한 내용과 바코드를 만들기 위한 공부를 정리 예정입니다.</p><p>감사합니다.</p>]]></content>
      
      
      <categories>
          
          <category> MES </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Barcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MES(생산관리시스템, Manufacturing Execution System)</title>
      <link href="/2018/10/10/MES-%EC%83%9D%EC%82%B0%EA%B4%80%EB%A6%AC%EC%8B%9C%EC%8A%A4%ED%85%9C-Manufacturing-Execution-System/"/>
      <url>/2018/10/10/MES-%EC%83%9D%EC%82%B0%EA%B4%80%EB%A6%AC%EC%8B%9C%EC%8A%A4%ED%85%9C-Manufacturing-Execution-System/</url>
      
        <content type="html"><![CDATA[<p>MES는 Manufacturing Execution System 의 약어라고 합니다.</p><p>생산관리시스템 / 제조실행시스템 으로 불리고 있더라고요 정확한 표현은 추후에 라도 업데이트 하겠습니다.</p><p>우선 저처럼 MES의 약어가 무엇인가 부터 찾으시는 분들을 위해 제가 먼저 검색해보고 잘 이해가 되었던 링크를 하나 공유해 드리겠습니다.</p><p>미라콤 이라는 회사 웹사이트에 가보면 다양한 정보가 있더라고요<br>특히 MES란 무엇인가? 라는 카툰으로 된 설명이 이해하기가 쉬웠습니다.<br>참고로 전 이 기업과 전혀 관계가 없습니다!</p><p>처음에는 공장자동화(Factory Automation)? 비스 무리한 개념으로 접근을 했었 습니다…<br>사실 관점에 따라 다르겠지만(저도 검색하다 보니 엄청 난감하고 아직도 정리가 안 끝나더라고요)</p><p>비슷하게 혼동이 가던 개념이 스마트팩토리(Smart Factory) 였습니다…<br>이걸 사무환경으로 그대로 옮겨서 이해를 하려고 노력을 해봤는데요…이렇습니다….</p><p>사무자동화(Office Automation)와 스마트오피스(Smart Office)? 가 있다고 가정을 하고 -_-;</p><p>회사에서 연/월차 등의 업무처리에 인쇄물 직접 서면보고 형식의 프로세스를 가지고있다 라고 가정을 해 봤습니다(요즘은 잘 없겠죠~?)…제가 이런 프로세스의 회사에서 초창기에 근무한적이 있었습니다…</p><p>누가 힘드냐!!!</p><p>가야할 사람 : 결제권자 만나기 겁나 힘들고 이거 들고가면 꼭 이상한 일정체크와 농담해서 사람 민망하게 합니다..<br>결제권자 : 허…이놈이 분명 내일까지 할일이 있는데…계속 찾아와서 좀 쉬자고 들이댑니다…<br>경리부 대리누나(그땐 막내였거든요 ㅎ) : 연말마다 연차보상비 계산하느라 며칠밤 집에도 못 가고 계산기 다 뚜드리고 정리 끝나서 갈려고 하면 “아 찾았어요 이러고 겁나들 몰려옵니다 - _-좀비WAR!!”<br>경리부 책임이사님 : 경리부 대리누나한테 이 아이는 왜 우리회사 지급일수보다 3일을 더 쉬었니? 라며 보상비를 받아오라 하십니다 ㅋㅋㅋㅋ<br>그냥 억울한 사람 : 분명 그날 제출도 하고 결제도 하고 다했는데….그날 급한업무 때문에 못 쉬었는데….그날이 몇일이었는지…(월요일날 출근해서 토요일 점심 먹고 집에 가고 이랬는데!!!) 기억이 안나 서 그냥 쉰 걸로 치고 마음을 비웠더니 경리부 책임이사님이 보상비 내노라고 버럭버럭 하십니다 ㅋㅋ<br>사장님 : 내 돈이….이것들 양심에 따라 지급되는 느낌이라 자선사업가가 된 느낌입니다 ;;<br>웃자고 쓴…..실화입니다 ㅡㅡ……..이직 후에는 그룹웨어가 잘(?) 되어있어서 이런 일들이 모두 전자결제를 통한 업무처리 프로세스가 도입되어 있었습니다.</p><p>이로써 위에 해프닝에서 일어난 누수라고 볼 수 있는 것들(시간/인력, 부정확한 정보로 인한 데이터 관리불가와 정보의 신뢰도 하락 등등등등등….)을 막을 수 있는 좋은 패러다임이 사무자동화의 한 축이었다고 생각할 수 있다..라고 저는 생각해 봅니다 이를 공장자동화로 매칭 을 시켜봤습니다..물론 많은 차이가 있고 전문분야도 아니기때문에 어설프게 이해한 상황일지도 모릅니다.</p><p>이번엔 정말 이해를 위한 억지 이해를 써야할 듯 해서 죄송스럽지만….적어보겠습니다</p><p>어떤 웹사이트 프로젝트가 기획/개발/디자인/퍼블리싱 구간 어디까지 진행되고있는지를 회의에서 물어 보시는 사장님의 기습공격을 받은 사람이 어……..그룹웨어에는 지금 투입인력 전체비용 프로젝트기간 외에는 그런 자세한 정보가 나와있지 않아서 나와있고 아는 부분만 답변을 하게 됩니다……당연히 알아야하는 PM역활 등의 사람들이야 숙지하고 있겠지만 외에 관련자/확인자 등은 확인하려면 역시나 해당 관련업무 숙지자를 만나야 정확한 상황을 파악 할 수 있습니다.</p><p>이는 역시 또다른 투입인력과 인력운영에 여러가지 누수가 생기게 됩니다(직원들이야 좋죠 ㅋㅋㅋㅋ…그런데 회사 망하면 힘들잖아요 ㅠㅠ), 이에 스마트 오피스라는 프로세스를 도입하기로 마음먹고 이에 각 직군 별 자세한 진행상황을 확인할 수 있게 됩니다..이는 투입인력이 과부하 상황에서 어려움을 겪는지 혹은 과 투입되어 비용이 낭비되고있는지 등의 확인이 수월해 질 수 있습니다.</p><p>이를 즉 스마트 오피스로 대입해서 이해한 상황입니다.</p><p>정말 말이 앞뒤도 안 맞고 이상하다고 저도 느끼지만…저는 아직 이정도 수준이라 ㅠㅠ</p><p>크흠…급 정색하지만</p><p>MES는 이러한 스마트오피스 와 완전 일치되는 개념은 아닌 듯 하지만 별개로</p><p>해당 공정을 정보화 하며 모니터링하고 문제(제품의 품질, 공정상 불량)를 추적 가능하게 하는 시스템에 속하는 하나의 작은 서브 시스템 이라고 이해하고 시작하기로 했습니다.</p><p>와서 진짜 깜짝 놀란건 모든 용어가 처음 듣고 용어들을 모르면 대화가 어렵다는 점 이었습니다, 지금은 다행이 PI기간이고 제가 적응할 시간이 있는 참이어서 디테일한 정보습득을 정말 부지런하게 메모하고있는 와중입니다, 아마 용어만 정리해도 엄청날 듯 합니다…QMS, WMA, ERP, Silo, 등등등..수도 없습니다..ㄷㄷㄷㄷㄷ</p><p>앞으로도 정리하면서 공부하겠지만 처음이니 만큼 사설이 반인 듯 했네요…….</p><p>많은 지적 부탁드리고 첫 기고 글에서 많은 변화가 있으리라 생각합니다(정확한 개념을 잡으면 수정하겠습니다).</p><p>읽어 주셔서 감사합니다.</p>]]></content>
      
      
      <categories>
          
          <category> MES </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MES </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Twilio SMS</title>
      <link href="/2017/05/30/Twilio-SMS/"/>
      <url>/2017/05/30/Twilio-SMS/</url>
      
        <content type="html"><![CDATA[<img src="/images/2017/outgoing-sms.width-800.png" class="center" width="500" title="Twillo"><p>Twillo를 사용해서 SMS를 공짜로 보내보자..(이제는 공짜가 아닙니다..) 가 취지였습니다.</p><p>Azure계정을 사용해서 가입합니다.<br><img src="/images/2017/twilio_01.png" class="center" title="twilio_01"><br><img src="/images/2017/twilio_02.png" class="center" title="twilio_02"><br><img src="/images/2017/twilio_03.png" class="center" title="twilio_03"><br><img src="/images/2017/twilio_04.png" class="center" title="twilio_04"><br>역시나 아무 의미없는 맘에도 없는 환영을 받습니다..ㅋㅋ</p><p>그럼 Twilio 콘솔에서 이것저것 처음사용자용 메뉴를 한참 보게끔 합니다..한번 둘러보시면 됩니다…<br>나중에 데시보드에서 Account SID, Auth Token을 받을 수 있습니다. 일단 여기까지만 받으시면 다음 개발로 넘어가겠습니다.</p><p>asp.net Console응용프로그램 프로젝트를 그냥 만드신 후에<br>위에 넣어드린 참고링크를 그대로 따라하시면 됩니다.<br>지금 Azure 가입자 대상 Twilio 가입을 받으면 10$를 넣어주는 공짜 서비스를(2017-05-30 현재 기준…나중에 원망 마세요) 행사중(?) 이네요 ㅎ</p><p>콘솔 응용프로그램에서의 코딩은 상당히 간단합니다..<br><figure class="highlight csharp"><figcaption><span>Sample</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> Twilio;</span><br><span class="line"><span class="keyword">using</span> Twilio.Rest.Api.V2010.Account;</span><br><span class="line"><span class="keyword">using</span> Twilio.Types;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">HelloTwilio</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">// Find your Account Sid and Auth Token at twilio.com/console</span></span><br><span class="line">            <span class="keyword">const</span> <span class="keyword">string</span> accountSid = <span class="string">"본인 Sid"</span>;</span><br><span class="line">            <span class="keyword">const</span> <span class="keyword">string</span> authToken = <span class="string">"본인 토큰"</span>;</span><br><span class="line">            TwilioClient.Init(accountSid, authToken);</span><br><span class="line">            <span class="keyword">var</span> to = <span class="keyword">new</span> PhoneNumber(<span class="string">"+821071706020"</span>);</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> message = MessageResource.Create(</span><br><span class="line">                to,</span><br><span class="line">                <span class="keyword">from</span>: <span class="keyword">new</span> PhoneNumber(<span class="string">"+12563054160"</span>),</span><br><span class="line">                body: <span class="string">"Twilio 에서 보냅니다!!!!"</span>);</span><br><span class="line">                Console.WriteLine(message.Sid);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception e)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(e.Message);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>물론 Nuget에서 Twilio 당연히 추가 하셨어야 합니다.<br>제가 왜 Twilio 서비스에 관심을 가지게 되었냐면…. 어떤분이 비용도 비싸다고 하시는데</p><p>사실<br><a href="https://www.twilio.com/docs/guides/how-to-send-bulk-sms-messages-in-csharp" title="target=_blank" target="_blank" rel="noopener">참고링크</a><br>이부분 때문입니다……<br>이게 과연 기존 SMS전송방식(웹서버 혹은 분할전송에 매번 비용을 지불하면서 사용하는)서비스를 이용하지 않아도 Azure호스팅 혹은 AWS호스팅에서 1개의 서비스로서<br>활용도가 있을까를 앞으로 알아보려고 이렇게 삽질아닌 초간단 삽질을 해 보았습니다..ㅎㅎ</p><p>꼭 해보고 비용까지 비교한(저의 고객사 기준 사용 업체별!!) 내용까지 공유드릴 수 있도록 노력해보겠습니다.!!<br><img src="/images/2017/twilio_05.jpg" class="center" title="twilio_05"><br>혹시모르니 인증샷 ㅎ?</p>]]></content>
      
      
      <categories>
          
          <category> C#.Net </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Twillo </tag>
            
            <tag> SMS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Life Cycle of TempData in ASP.Net MVC</title>
      <link href="/2016/01/25/Life-Cycle-of-TempData-in-ASP-Net-MVC/"/>
      <url>/2016/01/25/Life-Cycle-of-TempData-in-ASP-Net-MVC/</url>
      
        <content type="html"><![CDATA[<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ActionResult <span class="title">ViewInfo</span>(<span class="params"><span class="keyword">string</span> memId, CommonModel param</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//파라미터가 없는 접근을 차단</span></span><br><span class="line"><span class="keyword">if</span> (!NoParamValueCheck(memId))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> RedirectToAction(<span class="string">"NoParameterValue"</span>, <span class="string">"Home"</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">MemberView M = <span class="keyword">new</span> MemberView</span><br><span class="line">&#123;</span><br><span class="line">CommonParam = param</span><br><span class="line">,</span><br><span class="line">MemberInfo = _MemberService.MemberView(memId, MemberInfo.GetMemberGradeCode(), param)</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//의도적인 예외처리</span></span><br><span class="line"><span class="keyword">if</span> (M.MemberInfo == <span class="literal">null</span>)</span><br><span class="line">&#123;</span><br><span class="line">CustomLog4Net customLog = <span class="keyword">new</span> CustomLog4Net();</span><br><span class="line">customLog.ErrorToLog(<span class="keyword">this</span>.ControllerContext);</span><br><span class="line"><span class="keyword">return</span> RedirectToAction(<span class="string">"WrongParameterValue"</span>, <span class="string">"Home"</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> View(M);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>상세화면 -&gt; 수정화면 -&gt; 수정완료 -&gt; 다시 상세화면 이라는 시나리오상에서 void형 EditProc Controller를 사용했지만 실제로 프로시저에서는 @returnValue 라는 int형 결과를 리턴 하는 상황입니다 Model에서 부터 out Parameter로 결과를 받는 변수를 받아왔으며 실제 EditProc Controller는<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> RedirectToAction(<span class="string">"ViewInfo"</span>, <span class="keyword">new</span> &#123; memId = dto.memId, viewParam = param &#125;);</span><br></pre></td></tr></table></figure><br>를 리턴 합니다, 이때 ViewBag으로 결과값을 유지할 줄…알았습니다 이게 저에게는 애매한 부분 이었어서 TempData로 경했던 과정과 이유를 남겨놓습니다.<br>html bootstrap template 같은 거 찾아보면 1회 휘발성 notification box 등을 많이 제공하더라고요 PHP나 Classic ASP같은거로 작업한다고 하면 catch처리를 했던 기억이 있네요…왜 그렇게 무식하게 했었을까요….그게 더 공수가 들어갔거든요..<br>각설하고 View.cshtml에서<br><figure class="highlight csharp"><figcaption><span>view.cshtml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">resultNum TempData : @TempData[<span class="string">"resultNum"</span>]</span><br></pre></td></tr></table></figure><br>이렇게 TempData를 호출하면 새로고침시 정보가 사라지는 현상을 볼 수 있습니다…<br><img src="/images/2016/life_01.png" class="center" title="Life Cycle of TempData in ASP.Net MVC"><br>여기서 TempData의 구간은 Controller <-> Controller 이렇게 명시되어 있습니다, ViewBag, ViewData와는 확실히 용도가 분리되어 있습니다.<br>TempData.Keep 등으로 생명 주기를 연장도 가능합니다, 그런데..특별한 사유가 아니라면 사용할 일이 없어 보이네요.<br>사실 말이 거창합니다만..<br>아래와 같은 시나리오 입니다..<br><img src="/images/2016/life_02.png" class="center" title="check"></-></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> ASP.Net MVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> MVC4 </tag>
            
            <tag> TempData </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MSSQL-sp_send_dbmail(Transact-SQL)</title>
      <link href="/2015/12/03/MSSQL-sp-send-dbmail-Transact-SQL/"/>
      <url>/2015/12/03/MSSQL-sp-send-dbmail-Transact-SQL/</url>
      
        <content type="html"><![CDATA[<p>MSSQL에서 자동메일을 특별한 양식없이 알림성으로 받기 좋은 방법이 있습니다, sp_send_dbmail 이라고 하는 놈인데요 이게 express버전에서는 메뉴가 없습니다, 정품을 사용하고 설치옵션에서 해당사항을 체크해야 보이더라고요<br><img src="/images/2015/sp_send_dbmail_01.png" class="center" title="sp_send_dbmail_01"><br>데이터베이스 메일 &gt; 데이터베이스 메일구성 에서 없으면 등록하면 됩니다<br><img src="/images/2015/sp_send_dbmail_02.png" class="center" title="sp_send_dbmail_02"><br>설정은 끝입니다, POP3 설정이랑 비슷하죠? 당연히 SMTP설정은 되어있어야 합니다.<br>SQL Server 에이전트 설정을 해주시면 됩니다 이제<br><img src="/images/2015/sp_send_dbmail_03.png" class="center" title="sp_send_dbmail_03"><br>이후 Batch Job을 걸어서 호출하는 방식 입니다.<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">sp_configure '<span class="keyword">show</span> <span class="keyword">advanced</span> options<span class="string">', 1</span></span><br><span class="line"><span class="string">sp_configure '</span><span class="keyword">show</span> <span class="keyword">advanced</span> options<span class="string">', 1</span></span><br><span class="line"><span class="string">go</span></span><br><span class="line"><span class="string">reconfigure</span></span><br><span class="line"><span class="string">go</span></span><br><span class="line"><span class="string">sp_configure '</span><span class="keyword">Database</span> Mail XPs<span class="string">',1</span></span><br><span class="line"><span class="string">go</span></span><br><span class="line"><span class="string">reconfigure</span></span><br><span class="line"><span class="string">go</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">use msdb</span></span><br><span class="line"><span class="string">go</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">declare @body_str varchar(2000);</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">set @body_str = '</span>메일이 <span class="string">' + @@SERVERNAME + '</span>로 부터 발송되었습니다.<span class="string">'</span></span><br><span class="line"><span class="string">set @body_str = @body_str + ''</span></span><br><span class="line"><span class="string">set @body_str = @body_str + '</span>발송 시간 : <span class="string">' + cast(getdate() as varchar(20)) + ''</span></span><br><span class="line"><span class="string">set @body_str = @body_str + '</span>발송 머신 : <span class="string">' + HOST_NAME() + ''</span></span><br><span class="line"><span class="string">set @body_str = @body_str + ''</span></span><br><span class="line"><span class="string">set @body_str = @body_str + '</span>감사합니다.<span class="string">'</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">exec msdb.dbo.sp_send_dbmail</span></span><br><span class="line"><span class="string">    @profile_name = '</span>UserEmailSender<span class="string">'</span></span><br><span class="line"><span class="string">    ,@recipients = '</span>jklee@wylie.co.kr<span class="string">'</span></span><br><span class="line"><span class="string">    ,@subject = '</span>데이터베이스 메일 보내기 테스트<span class="string">'</span></span><br><span class="line"><span class="string">    ,@body = @body_str</span></span><br><span class="line"><span class="string">    ,@body_format = '</span>html<span class="string">';</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">----------결과조회</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">use msdb</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">select *</span></span><br><span class="line"><span class="string">from sysmail_mailitems</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">select *</span></span><br><span class="line"><span class="string">from sysmail_log</span></span><br></pre></td></tr></table></figure><br>결국 메일에 따라서 스팸으로 가기도 하겠지만 양식 맞추는게 노가다성으로 보여지긴 합니다만 저는 이거 하나로 매일 받아야하는 알림을 약 2년여간 아주 잘 활용했었습니다.</p>]]></content>
      
      
      <categories>
          
          <category> DB </category>
          
          <category> MSSQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> db mail </tag>
            
            <tag> SP_SEND_DBMAIL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MS Outlook Email 관리 AddIn - 4</title>
      <link href="/2015/10/26/MS-Outlook-Email-%EA%B4%80%EB%A6%AC-AddIn-4/"/>
      <url>/2015/10/26/MS-Outlook-Email-%EA%B4%80%EB%A6%AC-AddIn-4/</url>
      
        <content type="html"><![CDATA[<img src="/images/2015/04_01.png" class="center" title="Working Scenario"><img src="/images/2015/04_02.png" class="center" title="Working Scenario"><img src="/images/2015/04_03.png" class="center" title="Working Scenario"><img src="/images/2015/04_04.png" class="center" title="Working Scenario"><p>크흛..<br>정말 별거 아니네요…그래도 좋은 공부였습…크흛..ㅠㅠ</p>]]></content>
      
      
      <categories>
          
          <category> C#.Net </category>
          
          <category> VSTO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MS Office AddIn </tag>
            
            <tag> Outlook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MS Outlook Email 관리 AddIn - 3</title>
      <link href="/2015/10/25/MS-Outlook-Email-%EA%B4%80%EB%A6%AC-AddIn-3/"/>
      <url>/2015/10/25/MS-Outlook-Email-%EA%B4%80%EB%A6%AC-AddIn-3/</url>
      
        <content type="html"><![CDATA[<img src="/images/2015/outlook_layout_02.png" class="center" title="Layout Result"><p>ManageTaskPeneRibbon 메뉴로 I/F는 XML로 XML은 Web프로젝트 얼른 하나 만들어서 거기서 대충 관리하는 식으로 만들었습니다..</p><ul><li><a href="/2015/10/23/MS-Outlook-Email-관리-AddIn-1/" title="MS Outlook Email 관리 AddIn - 1">MS Outlook Email 관리 AddIn - 1</a></li><li><a href="/2015/10/24/MS-Outlook-Email-관리-AddIn-2/" title="MS Outlook Email 관리 AddIn - 2">MS Outlook Email 관리 AddIn - 2</a></li><li><a href="/2015/10/25/MS-Outlook-Email-관리-AddIn-3/" title="MS Outlook Email 관리 AddIn - 3">MS Outlook Email 관리 AddIn - 3</a></li><li><a href="/2015/10/26/MS-Outlook-Email-관리-AddIn-4/" title="MS Outlook Email 관리 AddIn - 4">MS Outlook Email 관리 AddIn - 4</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> C#.Net </category>
          
          <category> VSTO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MS Office AddIn </tag>
            
            <tag> Outlook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MS Outlook Email 관리 AddIn - 2</title>
      <link href="/2015/10/24/MS-Outlook-Email-%EA%B4%80%EB%A6%AC-AddIn-2/"/>
      <url>/2015/10/24/MS-Outlook-Email-%EA%B4%80%EB%A6%AC-AddIn-2/</url>
      
        <content type="html"><![CDATA[<img src="/images/2015/outlook_layout.png" class="center" title="Layout Test"><p>이런식으로..새 전자 메일 작성시 우측에 트리구조로…넣습니다..<br>벼..별거 아닌듯 보입니다 ㅠㅠ</p><ul><li><a href="/2015/10/23/MS-Outlook-Email-관리-AddIn-1/" title="MS Outlook Email 관리 AddIn - 1">MS Outlook Email 관리 AddIn - 1</a></li><li><a href="/2015/10/24/MS-Outlook-Email-관리-AddIn-2/" title="MS Outlook Email 관리 AddIn - 2">MS Outlook Email 관리 AddIn - 2</a></li><li><a href="/2015/10/25/MS-Outlook-Email-관리-AddIn-3/" title="MS Outlook Email 관리 AddIn - 3">MS Outlook Email 관리 AddIn - 3</a></li><li><a href="/2015/10/26/MS-Outlook-Email-관리-AddIn-4/" title="MS Outlook Email 관리 AddIn - 4">MS Outlook Email 관리 AddIn - 4</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> C#.Net </category>
          
          <category> VSTO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MS Office AddIn </tag>
            
            <tag> Outlook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MS Outlook Email 관리 AddIn - 1</title>
      <link href="/2015/10/23/MS-Outlook-Email-%EA%B4%80%EB%A6%AC-AddIn-1/"/>
      <url>/2015/10/23/MS-Outlook-Email-%EA%B4%80%EB%A6%AC-AddIn-1/</url>
      
        <content type="html"><![CDATA[<ol><li>목적<ul><li>나의 삽질 능력 테스트</li></ul></li><li>사용대상<ul><li>일반 회사원중 아웃룩을 다시깔때 깊은 빡침을 느끼는자</li></ul></li><li>개발환경<ul><li>VS2015</li><li>VSTO Tools for Office 2015</li></ul></li><li>예상<ul><li>아웃룩에 메뉴를 추가</li><li>기타 웹 등에서 관리된 메일을 불러와서 사용</li></ul></li><li>되..될까..??</li></ol><ul><li><a href="/2015/10/23/MS-Outlook-Email-관리-AddIn-1/" title="MS Outlook Email 관리 AddIn - 1">MS Outlook Email 관리 AddIn - 1</a></li><li><a href="/2015/10/24/MS-Outlook-Email-관리-AddIn-2/" title="MS Outlook Email 관리 AddIn - 2">MS Outlook Email 관리 AddIn - 2</a></li><li><a href="/2015/10/25/MS-Outlook-Email-관리-AddIn-3/" title="MS Outlook Email 관리 AddIn - 3">MS Outlook Email 관리 AddIn - 3</a></li><li><a href="/2015/10/26/MS-Outlook-Email-관리-AddIn-4/" title="MS Outlook Email 관리 AddIn - 4">MS Outlook Email 관리 AddIn - 4</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> C#.Net </category>
          
          <category> VSTO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MS Office AddIn </tag>
            
            <tag> Outlook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ASP.Net MVC4 BundleConfig에서 min.js 혹은 사용자 지정 css 등이 적용되지 않을 때</title>
      <link href="/2014/05/29/ASP-Net-MVC4-BundleConfig%EC%97%90%EC%84%9C-min-js-%ED%98%B9%EC%9D%80-%EC%82%AC%EC%9A%A9%EC%9E%90-%EC%A7%80%EC%A0%95-css-%EB%93%B1%EC%9D%B4-%EC%A0%81%EC%9A%A9%EB%90%98%EC%A7%80-%EC%95%8A%EC%9D%84-%EB%95%8C/"/>
      <url>/2014/05/29/ASP-Net-MVC4-BundleConfig%EC%97%90%EC%84%9C-min-js-%ED%98%B9%EC%9D%80-%EC%82%AC%EC%9A%A9%EC%9E%90-%EC%A7%80%EC%A0%95-css-%EB%93%B1%EC%9D%B4-%EC%A0%81%EC%9A%A9%EB%90%98%EC%A7%80-%EC%95%8A%EC%9D%84-%EB%95%8C/</url>
      
        <content type="html"><![CDATA[<figure class="highlight csharp"><figcaption><span>BundleConfig class</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">RegisterBundles</span>(<span class="params">BundleCollection bundles</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    bundles.Add(<span class="keyword">new</span> ScriptBundle(<span class="string">"~/Scripts/jquery"</span>)</span><br><span class="line">        .Include(<span class="string">"~/Scripts/jquery-1.8.0.js"</span>)</span><br><span class="line">        .Include(<span class="string">"~/Scripts/jquery.tmpl.min.js"</span>));            </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><figcaption><span>html 코드</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    @Scripts.Render("~/Scripts/jquery")</span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">body</span>&gt;</span>test<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><figcaption><span>html 랜더링 후</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/Scripts/jquery-1.8.0.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span>test<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>이렇게 BundleConfig에서 지정한 local이나 외부 js나 css파일이 렌더링 면서 동작을 안 하는 듯한?? 모습이 보일때가 있더라고요..</p><p>이거 debug모드 혹은 localhost에서는..이런 버그가 있답니다…<br>참고하세요</p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> ASP.Net MVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MVC4 </tag>
            
            <tag> BundleConfig </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MSSQL-CTE 재귀쿼리 - MSSQL2005 이상</title>
      <link href="/2012/12/07/MSSQL-CTE-%EC%9E%AC%EA%B7%80%EC%BF%BC%EB%A6%AC-MSSQL2005-%EC%9D%B4%EC%83%81/"/>
      <url>/2012/12/07/MSSQL-CTE-%EC%9E%AC%EA%B7%80%EC%BF%BC%EB%A6%AC-MSSQL2005-%EC%9D%B4%EC%83%81/</url>
      
        <content type="html"><![CDATA[<p>트리구조 등을 표현하려고 사용하다가, 메뉴나 코드관리에서 자주 사용했던 쿼리이며 List&lt;&gt;형태를 가져오기 위해 써먹었던놈입니다.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span> 지정이름CTE(menuCode, menuName, isPopup, menuURL, sortNo, menuLevel)</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line">(</span><br><span class="line"><span class="keyword">SELECT</span>     menuCode, menuName, isPopup, menuURL, sortNo, <span class="number">1</span> <span class="keyword">AS</span> menuLevel</span><br><span class="line"><span class="keyword">FROM</span>         테이블명 <span class="keyword">WITH</span>(NOLOCK)</span><br><span class="line"><span class="keyword">WHERE</span>     조건</span><br><span class="line"> </span><br><span class="line"><span class="keyword">UNION</span> ALL</span><br><span class="line"> </span><br><span class="line"><span class="keyword">SELECT</span>     A.menuCode, A.menuName, A.isPopup, A.menuURL, A.sortNo, menuLevel + <span class="number">1</span> <span class="keyword">AS</span> menuLevel</span><br><span class="line"><span class="keyword">FROM</span>         테이블명 A <span class="keyword">WITH</span>(NOLOCK) <span class="keyword">INNER</span> <span class="keyword">JOIN</span></span><br><span class="line">지정이름CTE B <span class="keyword">ON</span> A.menuParentCode = B.menuCode</span><br><span class="line"><span class="keyword">WHERE</span>     조건</span><br><span class="line">)</span><br><span class="line"><span class="keyword">SELECT</span>     menuCode, menuName, isPopup, menuURL, sortNo, menuLevel</span><br><span class="line"><span class="keyword">FROM</span>         지정이름CTE <span class="keyword">WITH</span>(NOLOCK)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> sortNo</span><br><span class="line"><span class="keyword">OPTION</span> (MAXRECURSION <span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>첫번째 호출되는 결과집합(UNION ALL)을 만들고 하단 결과집합이 빈 집합이 될때까지 반복하는 원리입니다.</p>]]></content>
      
      
      <categories>
          
          <category> DB </category>
          
          <category> MSSQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTE </tag>
            
            <tag> 재귀쿼리 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MSSQL Bulk Insert</title>
      <link href="/2012/10/18/MSSQL-Bulk-Insert/"/>
      <url>/2012/10/18/MSSQL-Bulk-Insert/</url>
      
        <content type="html"><![CDATA[<a href="https://docs.microsoft.com/ko-kr/sql/t-sql/statements/bulk-insert-transact-sql?view=sql-server-2017" title="target=_blank" target="_blank" rel="noopener">참고링크</a><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span> TRAN</span><br><span class="line"><span class="keyword">BULK</span> <span class="keyword">INSERT</span> 디비명.소유자.테이블명 <span class="keyword">FROM</span> <span class="string">'경로를 포함한 파일명'</span></span><br><span class="line"><span class="keyword">WITH</span> (</span><br><span class="line">DATAFILETYPE = <span class="string">'char'</span>, <span class="comment">--이건 텍스트 형태로 한다는거입니다.</span></span><br><span class="line">FIELDTERMINATOR = <span class="string">'\t'</span>, <span class="comment">--필드 구분자가 TAB으로 분리되어있는 형식입니다.</span></span><br><span class="line">ROWTERMINATOR = <span class="string">'\r\n'</span>, <span class="comment">--행 구분자가 케리지 리턴으로 되어있는 형태입니다.</span></span><br><span class="line">FIRSTROW = <span class="number">2</span> <span class="comment">--여긴 첫번째 행은 해당 필드명이 넘어오기때문에 2번째부터 읽자 머 이런의미로 넣은겁니다</span></span><br><span class="line"><span class="comment">--KEEPNULLS</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">IF</span>(@@<span class="keyword">ERROR</span> &lt;&gt; <span class="number">0</span>)</span><br><span class="line"><span class="keyword">ROLLBACK</span> TRAN</span><br><span class="line"><span class="keyword">ELSE</span></span><br><span class="line"><span class="keyword">COMMIT</span> TRAN</span><br></pre></td></tr></table></figure><p>사용법은 간단합니다.<br>270만건 기준 15초 평균 정도가 소요되네요.</p>]]></content>
      
      
      <categories>
          
          <category> DB </category>
          
          <category> MSSQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bulk Insert </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ASP RSS 읽어오기</title>
      <link href="/2008/08/21/ASP-RSS-%EC%9D%BD%EC%96%B4%EC%98%A4%EA%B8%B0/"/>
      <url>/2008/08/21/ASP-RSS-%EC%9D%BD%EC%96%B4%EC%98%A4%EA%B8%B0/</url>
      
        <content type="html"><![CDATA[<figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Dim</span> xmlHttp</span><br><span class="line"><span class="keyword">Set</span> xmlHttp = <span class="built_in">Server</span>.<span class="built_in">CreateObject</span>(<span class="string">"MSXML2.XMLHTTP.3.0"</span>)</span><br><span class="line">xmlHttp.Open <span class="string">"Get"</span>, RSS주소(받아들일), <span class="literal">false</span></span><br><span class="line">xmlHttp.Send()</span><br><span class="line"><span class="comment">'받아서 저장 ( 이게 요즘은 익숙하져? ㅋㅋ )</span></span><br><span class="line"><span class="keyword">Dim</span> RSSXML</span><br><span class="line">RSSXML = xmlHttp.ResponseText</span><br><span class="line"><span class="comment">'분할을 위해 DOM객채로 저장합니다 ( 안그래도 상관없는데... 이게더 좋은거 같습니다 )</span></span><br><span class="line"><span class="keyword">Dim</span> xmlDOM</span><br><span class="line"><span class="keyword">Set</span> xmlDOM = <span class="built_in">Server</span>.<span class="built_in">CreateObject</span>(<span class="string">"MSXML2.DomDocument.3.0"</span>)</span><br><span class="line">xmlDOM.async = <span class="literal">false</span></span><br><span class="line">xmlDOM.LoadXml(RSSXML)</span><br><span class="line"><span class="comment">'요건 센스 ㅋㅋ</span></span><br><span class="line"><span class="keyword">Set</span> xmlHttp = <span class="literal">Nothing</span></span><br><span class="line"><span class="comment">'DOM으로 저장한 객체중 item 노드로 뽑아내고 생성했던 객체는 소멸합니다.</span></span><br><span class="line"><span class="keyword">Dim</span> RSSItems</span><br><span class="line"><span class="keyword">Set</span> RSSItems = xmlDOM.getElementsByTagName(<span class="string">"item"</span>)</span><br><span class="line"><span class="keyword">Set</span> xmlDOM = <span class="literal">Nothing</span></span><br><span class="line"><span class="comment">'이 이후에 이제 배열의 갯수 - 1개로 돌려서</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">'items(i,0) : title</span></span><br><span class="line"><span class="comment">'items(i,1) : link</span></span><br><span class="line"><span class="comment">'items(i,2) : description</span></span><br><span class="line"><span class="comment">'items(i,3) : category</span></span><br><span class="line"><span class="comment">'items(i,4) : author</span></span><br><span class="line"><span class="comment">'items(i,5) : guid</span></span><br><span class="line"><span class="comment">'items(i,6) : comments</span></span><br><span class="line"><span class="comment">'items(i,7) : pubdate</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> Classic ASP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RSS </tag>
            
            <tag> Classic ASP </tag>
            
            <tag> ASP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Google AdSense 수입!</title>
      <link href="/2007/12/04/Google-AdSense-%EC%88%98%EC%9E%85/"/>
      <url>/2007/12/04/Google-AdSense-%EC%88%98%EC%9E%85/</url>
      
        <content type="html"><![CDATA[<img src="/images/2007/ad.bmp" class="center" width="650" title="Google AdSense 수입!"><p>요즘 들어 수입이 영..;;-_- 역시 홈페이지 뻑적지근하게 다시 만들어 봐야겠구나 ㅠㅠ<br>언제 만들어서 언제 다 정리해서 언제 다 옮기냐~! ㅠㅠ</p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Google AdSense </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ASP RSS 만들기</title>
      <link href="/2007/11/09/ASP-RSS-%EB%A7%8C%EB%93%A4%EA%B8%B0/"/>
      <url>/2007/11/09/ASP-RSS-%EB%A7%8C%EB%93%A4%EA%B8%B0/</url>
      
        <content type="html"><![CDATA[<figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Response</span>.ContentType = <span class="string">"text/xml"</span></span><br><span class="line"><span class="keyword">Set</span> xmlPars = <span class="built_in">Server</span>.<span class="built_in">CreateObject</span>(<span class="string">"Msxml2.DOMDocument"</span>)</span><br><span class="line"><span class="comment">'여기서 부터 rss 정보를 담는다.</span></span><br><span class="line"><span class="keyword">Set</span> rss = xmlPars.CreateElement(<span class="string">"rss"</span>)</span><br><span class="line">rss.setAttribute <span class="string">"version"</span>, <span class="string">"2.0"</span></span><br><span class="line">rss.setAttribute <span class="string">"xmlns:dc"</span>, <span class="string">"http://purl.org/dc/elements/1.1/"</span></span><br><span class="line">rss.setAttribute <span class="string">"xmlns:sy"</span>, <span class="string">"http://purl.org/rss/1.0/modules/syndication/"</span></span><br><span class="line">rss.setAttribute <span class="string">"xmlns:admin"</span>, <span class="string">"http://webns.net/mvcb/"</span></span><br><span class="line">rss.setAttribute <span class="string">"xmlns:rdf"</span>, <span class="string">"http://www.w3.org/1999/02/22-rdf-syntax-ns#"</span></span><br><span class="line">xmlPars.AppendChild(rss)</span><br><span class="line"><span class="comment">'&lt;channel&gt; 시작</span></span><br><span class="line"><span class="keyword">Set</span> Channel = xmlPars.CreateElement(<span class="string">"channel"</span>)</span><br><span class="line">rss.AppendChild(Channel)</span><br><span class="line">  </span><br><span class="line"><span class="comment">'&lt;title&gt;정보</span></span><br><span class="line"><span class="keyword">Set</span> title = xmlPars.CreateElement(<span class="string">"title"</span>)</span><br><span class="line">Channel.AppendChild(title)</span><br><span class="line">Channel.childnodes(<span class="number">0</span>).text = <span class="string">"사이트명(체널제목으로 들어가는 부분)"</span>  <span class="comment">'제목</span></span><br><span class="line"><span class="comment">'&lt;link&gt;정보</span></span><br><span class="line"><span class="keyword">Set</span> channel_link = xmlPars.CreateElement(<span class="string">"link"</span>)</span><br><span class="line">Channel.AppendChild(channel_link)</span><br><span class="line">Channel.childnodes(<span class="number">1</span>).text = <span class="string">"사이트의 도메인 혹은 체널제공 카테고리의 메인주소"</span>  <span class="comment">'주소</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">'&lt;description&gt;정보</span></span><br><span class="line"><span class="keyword">Set</span> description = xmlPars.CreateElement(<span class="string">"description"</span>)</span><br><span class="line">Channel.AppendChild(description)</span><br><span class="line">Channel.childnodes(<span class="number">2</span>).text = <span class="string">"사이트 설명"</span>  <span class="comment">'설명</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">'&lt;dc:language&gt;정보</span></span><br><span class="line"><span class="keyword">Set</span> language = xmlPars.CreateElement(<span class="string">"dc:language"</span>)</span><br><span class="line">Channel.AppendChild(language)</span><br><span class="line">Channel.childnodes(<span class="number">3</span>).text = <span class="string">"ko"</span> <span class="comment">'언어</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">'&lt;image&gt;정보</span></span><br><span class="line"><span class="comment">'Set image = xmlPars.CreateElement("image")</span></span><br><span class="line"><span class="comment">'Channel.AppendChild(image)</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">'이미지 정보에 들어갈 것들</span></span><br><span class="line"><span class="comment">'set i_title = xmlPars.CreateElement("title")</span></span><br><span class="line"><span class="comment">'set i_url = xmlPars.CreateElement("url")</span></span><br><span class="line"><span class="comment">'set i_width = xmlPars.CreateElement("width")</span></span><br><span class="line"><span class="comment">'set i_height = xmlPars.CreateElement("height")</span></span><br><span class="line"><span class="comment">'image.AppendChild(i_title)</span></span><br><span class="line"><span class="comment">'image.AppendChild(i_url)</span></span><br><span class="line"><span class="comment">'image.AppendChild(i_width)</span></span><br><span class="line"><span class="comment">'image.AppendChild(i_height)</span></span><br><span class="line"><span class="comment">'image.childnodes(0).text = "이미지 제목"</span></span><br><span class="line"><span class="comment">'image.childnodes(1).text = "이미지 경로"</span></span><br><span class="line"><span class="comment">'image.childnodes(2).text = "이미지 가로 사이즈"</span></span><br><span class="line"><span class="comment">'image.childnodes(3).text = "이미지 세로 사이즈"</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">'여기서부터 내용</span></span><br><span class="line"><span class="comment">'우선 데이터를 읽어오자</span></span><br><span class="line">objconn = <span class="string">"Provider=SQLOLEDB; Data Source=DB주소; Initial Catalog=DB명; User ID=아이디; Password=비밀번호;"</span></span><br><span class="line">SQL = <span class="string">"select top 50 필드1, 필드2 … "</span></span><br><span class="line">SQL = SQL &amp; <span class="string">" , 필드x, 필드y …"</span></span><br><span class="line">SQL = SQL &amp; <span class="string">" from 테이블명 "</span></span><br><span class="line">SQL = SQL &amp; <span class="string">" where 조건 "</span></span><br><span class="line">SQL = SQL &amp; <span class="string">" order by 어쩌구 desc "</span></span><br><span class="line"><span class="keyword">set</span> rs = <span class="built_in">Server</span>.<span class="built_in">CreateObject</span>(<span class="string">"ADODB.Recordset"</span>)</span><br><span class="line">rs.Open SQL,objconn,<span class="number">3</span></span><br><span class="line"><span class="comment">'여기서 부터 루프를 돌리자.</span></span><br><span class="line"><span class="keyword">Do</span> until rs.EOF</span><br><span class="line"><span class="comment">'이 부분에서 데이터 가공 및 함수호출을 이용한 정보 가공을 하면 된다</span></span><br><span class="line"><span class="comment">'ex) Name = rs(1) 이런식으로 ㅋㅋㅋ</span></span><br><span class="line"><span class="comment">'&lt;item&gt; 이라는 노드를 추가</span></span><br><span class="line"><span class="keyword">Set</span> item = xmlPars.CreateElement(<span class="string">"item"</span>)</span><br><span class="line">Channel.AppendChild(item)</span><br><span class="line"><span class="comment">'여기서부터 해당 포스트의 세부 정보를 출력</span></span><br><span class="line"><span class="keyword">set</span> title = xmlPars.CreateElement(<span class="string">"title"</span>) <span class="comment">'</span></span><br><span class="line"><span class="keyword">set</span> link = xmlPars.CreateElement(<span class="string">"link"</span>)</span><br><span class="line"><span class="keyword">set</span> description =  xmlPars.CreateElement(<span class="string">"description"</span>)</span><br><span class="line"><span class="keyword">set</span> dcdate =  xmlPars.CreateElement(<span class="string">"dc:date"</span>)</span><br><span class="line"><span class="keyword">set</span> dcsubject =  xmlPars.CreateElement(<span class="string">"dc:subject"</span>)</span><br><span class="line">item.AppendChild(title)</span><br><span class="line">item.AppendChild(link)</span><br><span class="line">item.AppendChild(description)</span><br><span class="line">item.AppendChild(dcdate)</span><br><span class="line">item.AppendChild(dcsubject)</span><br><span class="line">item.childnodes(<span class="number">0</span>).text = <span class="string">"1개의 포스트(게시글)의 제목"</span> <span class="comment">'제목</span></span><br><span class="line">item.childnodes(<span class="number">1</span>).text = <span class="string">"고유 주소"</span> <span class="comment">'브라우저 주소입력창에 쳤을때 바로 그 페이지가 나오게끔 하는 주소</span></span><br><span class="line">item.childnodes(<span class="number">2</span>).text = <span class="string">"본문내용"</span> <span class="comment">'내용 필드</span></span><br><span class="line">item.childnodes(<span class="number">3</span>).text = <span class="string">"등록일"</span> <span class="comment">'날짜 필드</span></span><br><span class="line">item.childnodes(<span class="number">4</span>).text = <span class="string">"카테고리 혹은 분류할 수 있는 테그명 등…"</span> <span class="comment">'분류 필드</span></span><br><span class="line">rs.movenext</span><br><span class="line"><span class="keyword">loop</span></span><br><span class="line"><span class="comment">'마지막으로 최종적으로 뿌려주자.</span></span><br><span class="line"><span class="built_in">Response</span>.Write xmlPars.xml</span><br><span class="line">rs.close</span><br><span class="line"><span class="keyword">set</span> rs = <span class="literal">nothing</span></span><br><span class="line"><span class="keyword">Set</span> xmlPars = <span class="literal">nothing</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> Classic ASP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RSS </tag>
            
            <tag> Classic ASP </tag>
            
            <tag> ASP </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
